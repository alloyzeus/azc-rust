package {{$PKG_NAME}}

import (
	{{$AZCORE_PKG}} "{{$AZCORE_IMPORT}}"
)

// {{$REF_KEY_TYPE_NAME}} is used to identify an instance of {{$TYPE_NAME}} system-wide.
type {{$REF_KEY_TYPE_NAME}} {{$ID_TYPE_NAME}}

const _{{$REF_KEY_TYPE_NAME}}Zero = {{$REF_KEY_TYPE_NAME}}({{$ID_TYPE_NAME}}Zero)
var _ {{$AZCORE_PKG}}.RefKey = _{{$REF_KEY_TYPE_NAME}}Zero
var _ {{$AZCORE_PKG}}.EntityRefKey = _{{$REF_KEY_TYPE_NAME}}Zero

// {{$REF_KEY_TYPE_NAME}}Zero returns a zero-valued instance of {{$REF_KEY_TYPE_NAME}}.
func {{$REF_KEY_TYPE_NAME}}Zero() {{$REF_KEY_TYPE_NAME}} { return _{{$REF_KEY_TYPE_NAME}}Zero }

// AZRefKey is required by {{$AZCORE_PKG}}.RefKey interface.
func (refKey {{$REF_KEY_TYPE_NAME}}) AZRefKey() {{$AZCORE_PKG}}.RefKey { return refKey }

// AZEntityRefKey is required by {{$AZCORE_PKG}}.EntityRefKey interface.
func (refKey {{$REF_KEY_TYPE_NAME}}) AZEntityRefKey() {{$AZCORE_PKG}}.EntityRefKey { return refKey }

// IsZero is required as {{$REF_KEY_TYPE_NAME}} is a value-object.
func (refKey {{$REF_KEY_TYPE_NAME}}) IsZero() bool {
	return {{$ID_TYPE_NAME}}(refKey) == {{$ID_TYPE_NAME}}Zero
}

// Equals is required as {{$REF_KEY_TYPE_NAME}} is a value-object.
func (refKey {{$REF_KEY_TYPE_NAME}}) Equals(other interface{}) bool {
	if x, ok := other.({{$REF_KEY_TYPE_NAME}}); ok {
		return x == refKey
	}
	if x, _ := other.(*{{$REF_KEY_TYPE_NAME}}); x != nil {
		return *x == refKey
	}
	return false
}
