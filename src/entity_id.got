package {{$PKG_NAME}}

import (
	{{$AZCORE_PKG}} "{{$AZCORE_IMPORT}}"
)

// {{$ID_TYPE_NAME}} is used to identify an instance of {{$TYPE_NAME}}.
type {{$ID_TYPE_NAME}} {{$ID_TYPE_PRIMITIVE}}

var _ {{$AZCORE_PKG}}.EntityID = {{$ID_TYPE_NAME}}Zero

// {{$ID_TYPE_NAME}}Zero is the zero value for {{$ID_TYPE_NAME}}.
const {{$ID_TYPE_NAME}}Zero = {{$ID_TYPE_NAME}}(0)

func {{$ID_TYPE_NAME}}FromPrimitiveValue(v {{$ID_TYPE_PRIMITIVE}}) {{$ID_TYPE_NAME}} {
	return {{$ID_TYPE_NAME}}(v)
}

func (id {{$ID_TYPE_NAME}}) PrimitiveValue() {{$ID_TYPE_PRIMITIVE}} {
	return {{$ID_TYPE_PRIMITIVE}}(id)
}

// AZEntityID is required by {{$AZCORE_PKG}}.EntityID interface.
func (id {{$ID_TYPE_NAME}}) AZEntityID() {{$AZCORE_PKG}}.EntityID { return id }

// IsZero is required as {{$ID_TYPE_NAME}} is a value-object.
func (id {{$ID_TYPE_NAME}}) IsZero() bool { return id == {{$ID_TYPE_NAME}}Zero }

// Equals is required as {{$ID_TYPE_NAME}} is a value-object.
func (id {{$ID_TYPE_NAME}}) Equals(other interface{}) bool {
	if x, ok := other.({{$ID_TYPE_NAME}}); ok {
		return x == refKey
	}
	if x, _ := other.(*{{$ID_TYPE_NAME}}); x != nil {
		return *x == refKey
	}
	return false
}
