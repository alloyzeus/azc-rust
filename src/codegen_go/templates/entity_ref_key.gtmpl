// {{.ref_key_type_name}} is used to identify
// an instance of entity {{.type_name}} system-wide.
type {{.ref_key_type_name}} {{.id_type_name}}

// To ensure that it conforms the interfaces. If any of these is failing,
// there's a bug in the generator.
var _ {{.base.azcore_pkg}}.RefKey = {{unexported_global .ref_key_type_name}}Zero
var _ {{.base.azcore_pkg}}.EntityRefKey = {{unexported_global .ref_key_type_name}}Zero
var _ {{.base.azcore_pkg}}.AZWireUnmarshalable = &{{unexported_global .ref_key_type_name}}ZeroVar
var _ {{.base.azcore_pkg}}.AZRSUnmarshalable = &{{unexported_global .ref_key_type_name}}ZeroVar
{{if .implements -}}
var _ {{.base.azcore_pkg}}.{{.implements}}RefKey = {{unexported_global .ref_key_type_name}}Zero
{{- end}}

const {{unexported_global .ref_key_type_name}}Zero =
	{{.ref_key_type_name}}({{.id_type_name}}Zero)
var {{unexported_global .ref_key_type_name}}ZeroVar =
	{{unexported_global .ref_key_type_name}}Zero

// {{.ref_key_type_name}}Zero returns
// a zero-valued instance of {{.ref_key_type_name}}.
func {{.ref_key_type_name}}Zero() {{.ref_key_type_name}} {
	return {{unexported_global .ref_key_type_name}}Zero
}

// AZRefKey is required for conformance with {{.base.azcore_pkg}}.RefKey.
func ({{.ref_key_type_name}}) AZRefKey() {}

// AZEntityRefKey is required for conformance
// with {{.base.azcore_pkg}}.EntityRefKey.
func ({{.ref_key_type_name}}) AZEntityRefKey() {}

// ID is required for conformance with {{.base.azcore_pkg}}.RefKey.
func (refKey {{.ref_key_type_name}}) ID() {{.base.azcore_pkg}}.EID {
	return {{.id_type_name}}(refKey)
}

{{if .implements -}}
// {{.implements}}ID is required for conformance with {{.base.azcore_pkg}}.{{.implements}}RefKey.
func (refKey {{.ref_key_type_name}}) {{.implements}}ID() {{.base.azcore_pkg}}.{{.implements}}ID {
	return {{.id_type_name}}(refKey)
}

{{end -}}

// IsZero is required as {{.ref_key_type_name}} is a value-object.
func (refKey {{.ref_key_type_name}}) IsZero() bool {
	return {{.id_type_name}}(refKey) == {{.id_type_name}}Zero
}

// IsValid returns true if this instance is valid independently as a ref-key.
// It doesn't tell whether it refers to a valid instance of {{.type_name}}.
func (refKey {{.ref_key_type_name}}) IsValid() bool {
	return {{.id_type_name}}(refKey).IsValid()
}

// Equals is required for conformance with {{.base.azcore_pkg}}.EntityRefKey.
func (refKey {{.ref_key_type_name}}) Equals(other interface{}) bool {
	if x, ok := other.({{.ref_key_type_name}}); ok {
		return x == refKey
	}
	if x, _ := other.(*{{.ref_key_type_name}}); x != nil {
		return *x == refKey
	}
	return false
}

// Equal is required for conformance with {{.base.azcore_pkg}}.EntityRefKey.
func (refKey {{.ref_key_type_name}}) Equal(other interface{}) bool {
	return refKey.Equals(other)
}

// Equals{{.ref_key_type_name}} returs true
// if the other value has the same attributes as refKey.
func (refKey {{.ref_key_type_name}}) Equals{{.ref_key_type_name}}(
	other {{.ref_key_type_name}},
) bool {
	return other == refKey
}

// AZWire is required for conformance
// with {{.base.azcore_pkg}}.AZWireObject.
func (refKey {{.ref_key_type_name}}) AZWire() []byte {
	return refKey.AZWireField(1)
}

// AZWireField is required for conformance
// with {{.base.azcore_pkg}}.AZWireObject.
func (refKey {{.ref_key_type_name}}) AZWireField(fieldNum int) []byte {
	return {{.id_type_name}}(refKey).AZWireField(fieldNum)
}

// {{.ref_key_type_name}}FromAZWire creates {{.ref_key_type_name}} from
// its azwire-encoded form.
func {{.ref_key_type_name}}FromAZWire(b []byte) (refKey {{.ref_key_type_name}}, readLen int, err error) {
	var id {{.id_type_name}}
	id, readLen, err = {{.id_type_name}}FromAZWire(b)
	if err != nil {
		return {{.ref_key_type_name}}Zero(), readLen, {{.ref_key_type_name}}AZWireDecodingArgumentError{}
	}
	return {{.ref_key_type_name}}(id), readLen, nil
}

// UnmarshalAZWire is required for conformance
// with {{.base.azcore_pkg}}.AZWireUnmarshalable.
func (refKey *{{.ref_key_type_name}}) UnmarshalAZWire(b []byte) (readLen int, err error) {
	var i {{.ref_key_type_name}}
	i, readLen, err = {{.ref_key_type_name}}FromAZWire(b)
	if err == nil {
		*refKey = i
	}
	return readLen, err
}

const {{unexported_global .ref_key_type_name}}AZRSPrefix = "{{.ref_key_def.azis.prefix}}"

// {{.ref_key_type_name}}FromAZRS creates {{.ref_key_type_name}} from
// its AZRS-encoded form.
func {{.ref_key_type_name}}FromAZRS(s string) ({{.ref_key_type_name}}, error) {
	if s == "" {
		return {{.ref_key_type_name}}Zero(), nil
	}
	if !strings.HasPrefix(s, _{{.ref_key_type_name}}AZRSPrefix) {
		return {{.ref_key_type_name}}Zero(), {{.ref_key_type_name}}AZRSDecodingArgumentError{}
	}
	s = strings.TrimPrefix(s, _{{.ref_key_type_name}}AZRSPrefix)
	b, err := {{.base.azcore_pkg}}.AZRSDecode(s)
	if err != nil {
		return {{.ref_key_type_name}}Zero(), {{.ref_key_type_name}}AZRSDecodingArgumentError{}
	}
	refKey, _, err := {{.ref_key_type_name}}FromAZWire(b)
	if err != nil {
		return {{.ref_key_type_name}}Zero(), {{.ref_key_type_name}}AZRSDecodingArgumentError{}
	}
	return refKey, nil
}

// AZRS returns an encoded representation of this instance. It returns empty
// if IsValid returned false.
//
// AZRS is required for conformance
// with {{.base.azcore_pkg}}.RefKey.
func (refKey {{.ref_key_type_name}}) AZRS() string {
	if !refKey.IsValid() {
		return ""
	}
	wire := refKey.AZWire()
	//TODO: configurable encoding
	return {{unexported_global .ref_key_type_name}}AZRSPrefix +
		{{.base.azcore_pkg}}.AZRSEncode(wire)
}

// UnmarshalAZRS is required for conformance
// with {{.base.azcore_pkg}}.AZRSUnmarshalable.
func (refKey *{{.ref_key_type_name}}) UnmarshalAZRS(s string) error {
	r, err := {{.ref_key_type_name}}FromAZRS(s)
	if err == nil {
		*refKey = r
	}
	return err
}

// MarshalJSON makes this type JSON-marshalable.
func (refKey {{.ref_key_type_name}}) MarshalJSON() ([]byte, error) {
	// We assume that there's no symbols in AZRS
	return []byte("\"" + refKey.AZRS() + "\""), nil
}

// UnmarshalJSON parses a JSON value.
func (refKey *{{.ref_key_type_name}}) UnmarshalJSON(b []byte) error {
	s := strings.Trim(string(b), "\"")
	if s == "" {
		*refKey = {{.ref_key_type_name}}Zero()
		return nil
	}
	i, err := {{.ref_key_type_name}}FromAZRS(s)
	if err == nil {
		*refKey = i
	}
	return err
}

// {{.ref_key_type_name}}Error defines an interface for all
// {{.ref_key_type_name}}-related errors.
type {{.ref_key_type_name}}Error interface {
	error
	{{.ref_key_type_name}}Error()
}

type {{.ref_key_type_name}}AZWireDecodingArgumentError struct {}

var _ {{.ref_key_type_name}}Error = {{.ref_key_type_name}}AZWireDecodingArgumentError{}
var _ errors.ArgumentError = {{.ref_key_type_name}}AZWireDecodingArgumentError{}

func ({{.ref_key_type_name}}AZWireDecodingArgumentError) {{.ref_key_type_name}}Error() {}
func ({{.ref_key_type_name}}AZWireDecodingArgumentError) ArgumentName() string { return "" }

func ({{.ref_key_type_name}}AZWireDecodingArgumentError) Error() string {
	return "{{.ref_key_type_name}}AZWireDecodingArgumentError"
}

type {{.ref_key_type_name}}AZRSDecodingArgumentError struct {}

var _ {{.ref_key_type_name}}Error = {{.ref_key_type_name}}AZRSDecodingArgumentError{}
var _ errors.ArgumentError = {{.ref_key_type_name}}AZRSDecodingArgumentError{}

func ({{.ref_key_type_name}}AZRSDecodingArgumentError) {{.ref_key_type_name}}Error() {}
func ({{.ref_key_type_name}}AZRSDecodingArgumentError) ArgumentName() string { return "" }

func ({{.ref_key_type_name}}AZRSDecodingArgumentError) Error() string {
	return "{{.ref_key_type_name}}AZRSDecodingArgumentError"
}
