// {{.ref_key_type_name}} is used to identify
// an instance of entity {{.type_name}} system-wide.
type {{.ref_key_type_name}} {{.id_type_name}}

// To ensure that it conforms the interfaces
var _ {{.base.azcore_pkg}}.RefKey = {{unexported_global .ref_key_type_name}}Zero
var _ {{.base.azcore_pkg}}.EntityRefKey = {{unexported_global .ref_key_type_name}}Zero
{{if .implements -}}
var _ {{.base.azcore_pkg}}.{{.implements}}RefKey = {{unexported_global .ref_key_type_name}}Zero
{{- end}}

const {{unexported_global .ref_key_type_name}}Zero = {{.ref_key_type_name}}({{.id_type_name}}Zero)

// {{.ref_key_type_name}}Zero returns
// a zero-valued instance of {{.ref_key_type_name}}.
func {{.ref_key_type_name}}Zero() {{.ref_key_type_name}} {
	return {{unexported_global .ref_key_type_name}}Zero
}

// AZRefKey is required for conformance with {{.base.azcore_pkg}}.RefKey.
func ({{.ref_key_type_name}}) AZRefKey() {}

// AZEntityRefKey is required for conformance
// with {{.base.azcore_pkg}}.EntityRefKey.
func ({{.ref_key_type_name}}) AZEntityRefKey() {}

// ID is required for conformance with {{.base.azcore_pkg}}.RefKey.
func (refKey {{.ref_key_type_name}}) ID() {{.base.azcore_pkg}}.EID {
	return {{.id_type_name}}(refKey)
}

{{if .implements -}}
// {{.implements}}ID is required for conformance with {{.base.azcore_pkg}}.{{.implements}}RefKey.
func (refKey {{.ref_key_type_name}}) {{.implements}}ID() {{.base.azcore_pkg}}.{{.implements}}ID {
	return {{.id_type_name}}(refKey)
}

{{end -}}

// IsZero is required as {{.ref_key_type_name}} is a value-object.
func (refKey {{.ref_key_type_name}}) IsZero() bool {
	return {{.id_type_name}}(refKey) == {{.id_type_name}}Zero
}

// Equals is required for conformance with {{.base.azcore_pkg}}.EntityRefKey.
func (refKey {{.ref_key_type_name}}) Equals(other interface{}) bool {
	if x, ok := other.({{.ref_key_type_name}}); ok {
		return x == refKey
	}
	if x, _ := other.(*{{.ref_key_type_name}}); x != nil {
		return *x == refKey
	}
	return false
}

// Equal is required for conformance with {{.base.azcore_pkg}}.EntityRefKey.
func (refKey {{.ref_key_type_name}}) Equal(other interface{}) bool {
	return refKey.Equals(other)
}

// Equals{{.ref_key_type_name}} returs true
// if the other value has the same attributes as refKey.
func (refKey {{.ref_key_type_name}}) Equals{{.ref_key_type_name}}(
	other {{.ref_key_type_name}},
) bool {
	return other == refKey
}

// RefKeyString returns an encoded representation of this instance.
//
// RefKeyString is required by {{.base.azcore_pkg}}.RefKey.
func (refKey {{.ref_key_type_name}}) RefKeyString() string {
	// TODO:
	// something like /<pluralized type_name>/<id> or
	// /<type_name><separator><id>
	//
	// might need to include version information (actually, use prefix option instead.).
	return "/{{.type_name}}/" + {{.id_type_name}}(refKey).IDString()
}
