// {{.type_name}}InstanceService is a service which
// provides methods to manipulate an instance of {{.type_name}}.
type {{.type_name}}InstanceService interface {
	{{.type_name}}InstanceStateService
}

// {{.type_name}}InstanceStateService is a service which
// provides access to instances metadata.
type {{.type_name}}InstanceStateService interface {
	// Get{{.type_name}}InstanceState checks if the provided
    // ref-key is valid and whether the instance is deleted.
	//
	// This method returns nil if the id is not referencing to any valid
	// instance.
	Get{{.type_name}}InstanceState(
		ctx {{.base.service_op_call_context_type_name}},
		id {{.ref_key_type_name}},
	) (*{{.type_name}}InstanceState, error)
}

// {{.type_name}}InstanceState holds information about
// an instance of {{.type_name}}.
type {{.type_name}}InstanceState struct {
    RevisionNumber_ int32

{{- if .lifecycle.deletion.enabled}}

    // Deletion_ holds information about the deletion of the instance. If
    // the instance has not been deleted, this field value will be nil.
	Deletion_ *{{.type_name}}DeletionState

{{- end}}
}

var _ {{.base.azcore_pkg}}.EntityInstanceInfo[
	int32, {{.type_name}}DeletionState,
] = {{.type_name}}InstanceState{}
var _ {{.base.azcore_pkg}}.ValueObjectAssert[
	{{.type_name}}DeletionState,
] = {{.type_name}}DeletionState{}

// {{.type_name}}InstanceStateZero returns an instance of
// {{.type_name}}InstanceState with attributes set their respective zero
// value.
func {{.type_name}}InstanceStateZero() {{.type_name}}InstanceState {
	return {{.type_name}}InstanceState{}
}

func (instInfo {{.type_name}}InstanceState) Clone() {{.type_name}}InstanceState {
{{- if .lifecycle.deletion.enabled}}
	if instInfo.Deletion_ != nil {
		cp := instInfo
		delInfo := cp.Deletion_.Clone()
		cp.Deletion_ = &delInfo
		return cp
	}
{{- end}}
	// Already a copy and there's no shared underlying data instance
	return instInfo
}

func (instInfo {{.type_name}}InstanceState) RevisionNumber() int32 { return instInfo.RevisionNumber_ }
func (instInfo {{.type_name}}InstanceState) Deletion() *{{.type_name}}DeletionState {
	return instInfo.Deletion_
}

// IsActive returns true if the instance is considered as active.
func (instInfo {{.type_name}}InstanceState) IsActive() bool {
    // Note: we will check other flags in the future, but that's said,
    // deleted instance is considered inactive.
    return !instInfo.IsDeleted()
}

// IsDeleted returns true if the instance was deleted.
func (instInfo {{.type_name}}InstanceState) IsDeleted() bool {
{{- if .lifecycle.deletion.enabled}}
	if delInfo := instInfo.Deletion(); delInfo != nil {
		return delInfo.Deleted()
	}
{{- end}}
	return false
}

{{- if .lifecycle.deletion.enabled}}

//----

// {{.type_name}}DeletionState holds information about
// the deletion of an instance if the instance has been deleted.
type {{.type_name}}DeletionState struct {
	Deleted_       bool
{{- if .lifecycle.deletion.notes.enabled}}
	DeletionNotes_ string
{{- end}}
}

var _ {{.base.azcore_pkg}}.EntityDeletionInfo = {{.type_name}}DeletionState{}
var _ {{.base.azcore_pkg}}.ValueObjectAssert[
	{{.type_name}}DeletionState,
] = {{.type_name}}DeletionState{}

func (instDelInfo {{.type_name}}DeletionState) Clone() {{.type_name}}DeletionState {
	// Already a copy and there's no shared underlying data instance
	return instDelInfo
}

func (instDelInfo {{.type_name}}DeletionState) Deleted() bool {
	return instDelInfo.Deleted_
}
{{- if .lifecycle.deletion.notes.enabled}}
func (instDelInfo {{.type_name}}DeletionState) DeletionNotes() string {
	return instDelInfo.DeletionNotes_
}
{{- end}}

{{- end}}

//----

// {{.type_name}}InstanceServiceInternal is a service which provides
// methods for manipulating instances of {{.type_name}}. Declared for
// internal use within a process, this interface contains methods that
// available to be called from another part of a process.
type {{.type_name}}InstanceServiceInternal interface {
	Create{{.type_name}}Internal(
		ctx {{.base.service_op_call_context_type_name}},
		input {{.type_name}}CreationParams,
	) (id {{.ref_key_type_name}}, initialState {{.type_name}}InstanceState, err error);

	{{- if .lifecycle.deletion.enabled}}

	// Delete{{.type_name}}Internal deletes an instance of
	// {{.type_name}} entity based identfied by idOfInstToDel.
	// The returned justDeleted will have the value of
	// true if this particular call resulted the deletion of the instance and
	// it will have the value of false of subsequent calls to this method.
	Delete{{.type_name}}Internal(
		ctx {{.base.service_op_call_context_type_name}},
		idOfInstToDel {{.ref_key_type_name}},
		input {{.type_name}}DeletionParams,
	) (justDeleted bool, currentState {{.type_name}}InstanceState, err error)

	{{- end}}
}

// {{.type_name}}CreationParams contains data to be passed
// as an argument when invoking the method Create{{.type_name}}Internal
// of {{.type_name}}InstanceServiceInternal.
type {{.type_name}}CreationParams struct {
	{{- /* TODO: generate embedded fields or use {{.type_name}}AttrSet */}}
}

{{- if .lifecycle.deletion.enabled}}

// {{.type_name}}DeletionParams contains data to be passed
// as an argument when invoking the method Delete{{.type_name}}Internal
// of {{.type_name}}InstanceServiceInternal.
type {{.type_name}}DeletionParams struct {
{{- if .lifecycle.deletion.notes.enabled}}
	DeletionNotes string
{{- end}}
}

{{- end}}
