// {{.ref_key_type_name}} is used to identify
// an instance of adjunct entity {{.type_name}}.
type {{.ref_key_type_name}} struct {
	{{- range .hosts}}
	{{unexported_field .identifier_name}} {{.type_name_with_pkg}}ID
	{{- end}}
}

// The total number of fields in the struct.
const {{unexported_global .ref_key_type_name}}FieldCount = {{len .hosts}}

// New{{.ref_key_type_name}} returns a new instance
// of {{.ref_key_type_name}} with the provided attribute values.
func New{{.ref_key_type_name}}(
	{{- range .hosts}}
	{{arg_name .identifier_name}} {{.type_name_with_pkg}}ID,
	{{- end}}
) {{.ref_key_type_name}} {
	return {{.ref_key_type_name}}{
		{{- range .hosts}}
		{{unexported_field .identifier_name}}: {{arg_name .identifier_name}},
		{{- end}}
	}
}

// To ensure that it conforms the interfaces. If any of these is failing,
// there's a bug in the generator.
var _ {{.base.azid_pkg}}.ID = {{unexported_global .ref_key_type_name}}Zero
var _ {{.base.azid_pkg}}.BinFieldUnmarshalable = &{{unexported_global .ref_key_type_name}}Zero
var _ {{.base.azid_pkg}}.TextUnmarshalable = &{{unexported_global .ref_key_type_name}}Zero
var _ {{.base.azcore_pkg}}.AdjunctEntityID = {{unexported_global .ref_key_type_name}}Zero
{{- range .implements}}{{- if .is_system}}
var _ {{$.base.azcore_pkg}}.{{.type_name}}ID = {{unexported_global $.ref_key_type_name}}Zero
{{- end}}{{- end}}

var {{unexported_global .ref_key_type_name}}Zero = {{.ref_key_type_name}}{
	{{- range .hosts}}
	{{unexported_field .identifier_name}}: {{.type_name_with_pkg}}IDZero(),
	{{- end}}
}

// {{.ref_key_type_name}}Zero returns
// a zero-valued instance of {{.ref_key_type_name}}.
func {{.ref_key_type_name}}Zero() {{.ref_key_type_name}} {
	return {{unexported_global .ref_key_type_name}}Zero
}

// AZID is required by {{.base.azid_pkg}}.ID interface.
func ({{.ref_key_type_name}}) AZID() {}

// AZAdjunctEntityID is required
// by {{.base.azcore_pkg}}.AdjunctEntityID interface.
func ({{.ref_key_type_name}}) AZAdjunctEntityID() {}

{{- range .implements}}{{- if .is_system}}

{{- end}}{{- end}}

// IsZero is required as {{.ref_key_type_name}} is a value-object.
func (id {{.ref_key_type_name}}) IsZero() bool {
	return {{range .hosts -}}id.{{unexported_field .identifier_name}}.IsZero() &&
		{{end -}} true
}

// IsStaticallyValid returns true if this instance is valid as an isolated value
// of {{.ref_key_type_name}}.
// It doesn't tell whether it refers to a valid instance of {{.type_name}}.
func (id {{.ref_key_type_name}}) IsStaticallyValid() bool {
	return {{range .hosts -}}id.{{unexported_field .identifier_name}}.IsStaticallyValid() &&
		{{end -}} true
}

// IsNotStaticallyValid returns the negation of value returned by IsStaticallyValid.
func (id {{.ref_key_type_name}}) IsNotStaticallyValid() bool {
	return !id.IsStaticallyValid()
}

// Equals is required for conformance with {{.base.azcore_pkg}}.AdjunctEntityID.
func (id {{.ref_key_type_name}}) Equals(other interface{}) bool {
	if x, ok := other.({{.ref_key_type_name}}); ok {
		return {{range .hosts -}}id.{{unexported_field .identifier_name}}.Equals{{.bare_type_name}}ID(x.{{unexported_field .identifier_name}}) &&
			{{end -}} true
	}
	if x, _ := other.(*{{.ref_key_type_name}}); x != nil {
		return {{range .hosts -}}id.{{unexported_field .identifier_name}}.Equals{{.bare_type_name}}ID(x.{{unexported_field .identifier_name}}) &&
			{{end -}} true
	}
	return false
}

// Equal is required for conformance with {{.base.azcore_pkg}}.AdjunctEntityID.
func (id {{.ref_key_type_name}}) Equal(other interface{}) bool {
	return id.Equals(other)
}

// Equals{{.ref_key_type_name}} returns true
// if the other value has the same attributes as id.
func (id {{.ref_key_type_name}}) Equals{{.ref_key_type_name}}(
	other {{.ref_key_type_name}},
) bool {
	return {{range .hosts -}}id.{{unexported_field .identifier_name}}.Equals{{.bare_type_name}}ID(other.{{unexported_field .identifier_name}}) &&
		{{end -}} true
}

// AZIDBin is required for conformance
// with {{.base.azid_pkg}}.ID.
func (id {{.ref_key_type_name}}) AZIDBin() []byte {
	data, typ := id.AZIDBinField()
	out := []byte{typ.Byte()}
	return append(out, data...)
}

// {{.ref_key_type_name}}FromAZIDBin creates a new instance of
// {{.ref_key_type_name}} from its azid-bin form.
func {{.ref_key_type_name}}FromAZIDBin(
	b []byte,
) (id {{.ref_key_type_name}}, readLen int, err error) {
	typ, err := {{.base.azid_pkg}}.BinDataTypeFromByte(b[0])
	if err != nil {
		return {{.ref_key_type_name}}Zero(), 0,
			{{.base.azerrs_pkg}}.ArgWrap("", "type parsing", err)
	}
	if typ != {{.base.azid_pkg}}.BinDataTypeArray {
		return {{.ref_key_type_name}}Zero(), 0,
			{{.base.azerrs_pkg}}.Arg("", {{.base.azerrs_pkg}}.EntMsg("type", "unsupported"))
	}

	id, readLen, err = {{.ref_key_type_name}}FromAZIDBinField(b[1:], typ)
	return id, readLen + 1, err
}

// AZIDBinField is required for conformance
// with {{.base.azid_pkg}}.ID.
func (id {{.ref_key_type_name}}) AZIDBinField() ([]byte, {{.base.azid_pkg}}.BinDataType) {
	{{if .hosts -}}
	var typesBytes []byte
	var dataBytes []byte
	var fieldBytes []byte
	var fieldType {{.base.azid_pkg}}.BinDataType

	{{- range $i, $h := .hosts}}

	fieldBytes, fieldType = id.{{unexported_field $h.identifier_name}}.AZIDBinField()
	typesBytes = append(typesBytes, fieldType.Byte())
	dataBytes = append(dataBytes, fieldBytes...)

	{{- end}}

	var out = []byte{byte(len(typesBytes))}
	out = append(out, typesBytes...)
	out = append(out, dataBytes...)
	return out, {{.base.azid_pkg}}.BinDataTypeArray
	{{- end}}
}

// {{.ref_key_type_name}}FromAZIDBinField creates {{.ref_key_type_name}} from
// its azid-bin field form.
func {{.ref_key_type_name}}FromAZIDBinField(
	b []byte, typeHint {{.base.azid_pkg}}.BinDataType,
) (id {{.ref_key_type_name}}, readLen int, err error) {
	if typeHint != {{.base.azid_pkg}}.BinDataTypeArray {
		return {{.ref_key_type_name}}Zero(), 0,
			{{.base.azerrs_pkg}}.Arg("", {{.base.azerrs_pkg}}.EntMsg("type", "unsupported"))
	}

	arrayLen := int(b[0])
	if arrayLen != {{unexported_global .ref_key_type_name}}FieldCount {
		return {{.ref_key_type_name}}Zero(), 0,
			{{.base.azerrs_pkg}}.Arg("", {{.base.azerrs_pkg}}.EntMsg("field count", "mismatch"))
	}

	typeCursor := 1
	dataCursor := typeCursor + arrayLen

	var fieldType {{.base.azid_pkg}}.BinDataType

	{{- range .hosts}}

	fieldType, err = {{$.base.azid_pkg}}.BinDataTypeFromByte(b[typeCursor])
	if err != nil {
		return {{$.ref_key_type_name}}Zero(), 0,
			{{$.base.azerrs_pkg}}.ArgWrap("", "{{unexported_field .identifier_name}} ref-key type parsing", err)
	}
	typeCursor++
	{{unexported_field .identifier_name}}ID, readLen, err := {{.type_name_with_pkg}}IDFromAZIDBinField(
		b[dataCursor:], fieldType)
	if err != nil {
		return {{$.ref_key_type_name}}Zero(), 0,
			{{$.base.azerrs_pkg}}.ArgWrap("", "{{unexported_field .identifier_name}} ref-key data parsing", err)
	}
	dataCursor += readLen

	{{- end}}

	return {{.ref_key_type_name}}{
		{{- range .hosts}}
		{{unexported_field .identifier_name}}: {{arg_name .identifier_name}}ID,
		{{- end}}
	}, dataCursor, nil
}

// UnmarshalAZIDBinField is required for conformance
// with {{.base.azcore_pkg}}.BinFieldUnmarshalable.
func (id *{{.ref_key_type_name}}) UnmarshalAZIDBinField(
	b []byte, typeHint {{.base.azid_pkg}}.BinDataType,
) (readLen int, err error) {
	i, readLen, err := {{.ref_key_type_name}}FromAZIDBinField(b, typeHint)
	if err == nil {
		*id = i
	}
	return readLen, err
}

const {{unexported_global .ref_key_type_name}}AZIDTextPrefix = "{{.ref_key_def.azid_text.prefix}}"

// AZIDText is required for conformance
// with {{.base.azid_pkg}}.ID.
func (id {{.ref_key_type_name}}) AZIDText() string {
	if !id.IsStaticallyValid() {
		return ""
	}

	return {{unexported_global .ref_key_type_name}}AZIDTextPrefix +
		{{.base.azid_pkg}}.TextEncode(id.AZIDBin())
}

// {{.ref_key_type_name}}FromAZIDText creates a new instance of
// {{.ref_key_type_name}} from its azid-text form.
func {{.ref_key_type_name}}FromAZIDText(s string) ({{.ref_key_type_name}}, error) {
	if s == "" {
		return {{.ref_key_type_name}}Zero(), nil
	}
	if !strings.HasPrefix(s, {{unexported_global .ref_key_type_name}}AZIDTextPrefix) {
		return {{.ref_key_type_name}}Zero(),
			{{.base.azerrs_pkg}}.Arg("", {{.base.azerrs_pkg}}.EntMsg("prefix", "mismatch"))
	}
	s = strings.TrimPrefix(s, {{unexported_global .ref_key_type_name}}AZIDTextPrefix)
	b, err := {{.base.azid_pkg}}.TextDecode(s)
	if err != nil {
		return {{.ref_key_type_name}}Zero(),
			{{.base.azerrs_pkg}}.ArgWrap("", "data parsing", err)
	}
	id, _, err := {{.ref_key_type_name}}FromAZIDBin(b)
	if err != nil {
		return {{.ref_key_type_name}}Zero(),
			{{.base.azerrs_pkg}}.ArgWrap("", "data decoding", err)
	}
	return id, nil
}

// UnmarshalAZIDText is required for conformance
// with {{.base.azid_pkg}}.TextUnmarshalable.
func (id *{{.ref_key_type_name}}) UnmarshalAZIDText(s string) error {
	r, err := {{.ref_key_type_name}}FromAZIDText(s)
	if err == nil {
		*id = r
	}
	return err
}

// MarshalText is for compatibility with Go's encoding.TextMarshaler
func (id {{.ref_key_type_name}}) MarshalText() ([]byte, error) {
	return []byte(id.AZIDText()), nil
}

// UnmarshalText is for conformance with Go's encoding.TextUnmarshaler
func (id *{{.ref_key_type_name}}) UnmarshalText(b []byte) error {
	r, err := {{.ref_key_type_name}}FromAZIDText(string(b))
	if err == nil {
		*id = r
	}
	return err
}

// MarshalJSON makes this type JSON-marshalable.
func (id {{.ref_key_type_name}}) MarshalJSON() ([]byte, error) {
	// We assume that there are no symbols in azid-text
	return []byte("\"" + id.AZIDText() + "\""), nil
}

// UnmarshalJSON parses a JSON value.
func (id *{{.ref_key_type_name}}) UnmarshalJSON(b []byte) error {
	s := strings.Trim(string(b), "\"")
	if s == "" {
		*id = {{.ref_key_type_name}}Zero()
		return nil
	}
	i, err := {{.ref_key_type_name}}FromAZIDText(s)
	if err == nil {
		*id = i
	}
	return err
}

{{- range .hosts}}

// {{.identifier_name}} returns instance's {{.identifier_name}} value.
func (id {{$.ref_key_type_name}}) {{.identifier_name}}() {{.type_name_with_pkg}}ID {
	return id.{{unexported_field .identifier_name}}
}

// {{.identifier_name}}Ptr returns a pointer to a copy of
// {{.identifier_name}}ID if it's considered valid.
func (id {{$.ref_key_type_name}}) {{.identifier_name}}Ptr() *{{.type_name_with_pkg}}ID {
	if id.{{unexported_field .identifier_name}}.IsStaticallyValid() {
		rk := id.{{unexported_field .identifier_name}}
		return &rk
	}
	return nil
}

// With{{.identifier_name}} returns a copy
// of {{$.ref_key_type_name}}
// with its {{unexported_field .identifier_name}} attribute set to the provided value.
func (id {{$.ref_key_type_name}}) With{{.identifier_name}}(
	{{arg_name .identifier_name}} {{.type_name_with_pkg}}ID,
) {{$.ref_key_type_name}} {
	{{- $p := .identifier_name}}
	return {{$.ref_key_type_name}}{
		{{- range $.hosts}}{{if eq .identifier_name $p}}
		{{unexported_field .identifier_name}}: {{arg_name .identifier_name}},{{else}}
		{{unexported_field .identifier_name}}: id.{{unexported_field .identifier_name}},{{end}}{{- end}}
	}
}

{{- end}}

// {{.ref_key_type_name}}Error defines an interface for all
// {{.ref_key_type_name}}-related errors.
type {{.ref_key_type_name}}Error interface {
	error
	{{.ref_key_type_name}}Error()
}
