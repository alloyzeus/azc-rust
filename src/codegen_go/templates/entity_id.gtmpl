// {{.id_type_name}} is a scoped identifier
// used to identify an instance of entity {{.type_name}}.
type {{.id_type_name}} {{.id_def.type_name}}

var _ {{.base.azcore_pkg}}.EID = {{.id_type_name}}Zero
var _ {{.base.azcore_pkg}}.EntityID = {{.id_type_name}}Zero
{{if .implements -}}
var _ {{.base.azcore_pkg}}.{{.implements}}ID = {{.id_type_name}}Zero
{{- end}}

// {{.id_type_name}}Zero is the zero value
// for {{.id_type_name}}.
const {{.id_type_name}}Zero =
	{{.id_type_name}}(0)

// {{.id_type_name}}FromPrimitiveValue creates an instance
// of {{.id_type_name}} from its primitive value.
func {{.id_type_name}}FromPrimitiveValue(v {{.id_def.type_name}}) {{.id_type_name}} {
	return {{.id_type_name}}(v)
}

func {{.id_type_name}}FromAZEIDBinary(b []byte) ({{.id_type_name}}, error) {
	e, n := binary.Uvarint(b)
	if n > 0 {
		return {{.id_type_name}}(e), nil
	}
	return {{.id_type_name}}Zero, {{.id_type_name}}BinaryDecodingArgumentError{}
}

// PrimitiveValue returns the ID in its primitive type. Prefer to use
// this method instead of casting directly.
func (id {{.id_type_name}}) PrimitiveValue() {{.id_def.type_name}} {
	return {{.id_def.type_name}}(id)
}

// AZEID is required for conformance
// with {{.base.azcore_pkg}}.EID.
func ({{.id_type_name}}) AZEID() {}

// AZEntityID is required for conformance
// with {{.base.azcore_pkg}}.EntityID.
func ({{.id_type_name}}) AZEntityID() {}

{{if .implements -}}
// AZ{{.implements}}ID is required for conformance
// with {{.base.azcore_pkg}}.{{.implements}}ID.
func ({{.id_type_name}}) AZ{{.implements}}ID() {}

{{end -}}

// IsZero is required as {{.id_type_name}} is a value-object.
func (id {{.id_type_name}}) IsZero() bool {
	return id == {{.id_type_name}}Zero
}

// Equals is required as {{.id_type_name}} is a value-object.
//
// Use Equals{{.id_type_name}} method if the other value
// has the same type.
func (id {{.id_type_name}}) Equals(other interface{}) bool {
	if x, ok := other.({{.id_type_name}}); ok {
		return x == id
	}
	if x, _ := other.(*{{.id_type_name}}); x != nil {
		return *x == id
	}
	return false
}

// Equal is a wrapper for Equals method. It is required for
// compatibility with github.com/google/go-cmp
func (id {{.id_type_name}}) Equal(other interface{}) bool {
	return id.Equals(other)
}

// Equals{{.id_type_name}} determines if the other instance is equal
// to this instance.
func (id {{.id_type_name}}) Equals{{.id_type_name}}(
	other {{.id_type_name}},
) bool {
	return id == other
}

// IDString returns a string representation of this instance.
func (id {{.id_type_name}}) IDString() string {
	return id.AZEIDString()
}

// AZEIDBinary returns a binary representation
// of the instance as an EID.
func (id {{.id_type_name}}) AZEIDBinary() []byte {
	buf := make([]byte, binary.MaxVarintLen{{.id_def.primitive_size}})
	n := binary.PutUvarint(buf, uint64(id))
	return buf[:n]
}

// AZEIDString returns a string representation
// of the instance as an EID.
func (id {{.id_type_name}}) AZEIDString() string {
	{{if eq .id_def.text_encoding.encoding "" -}}
	return "{{.id_def.text_encoding.prefix}}" + strconv.FormatInt(int64(id), 10)
	{{- else -}}
	return "{{.id_def.text_encoding.prefix}}" + {{.id_def.text_encoding.encoding}}.EncodeInt64(int64(id))
	{{- end}}
}

{{$uid_type := print "uint" .id_def.primitive_size}}
{{range .id_def.bitfield.sub_fields}}
// Is{{.identifier}} returns true if the {{$.type_name}} instance
// this ID is for is a {{.identifier}} {{$.type_name}}.
//
{{range .doc_lines}}// {{.}}
{{end -}}
func (id {{$.id_type_name}}) Is{{.identifier}}() bool {
	const mask = {{$uid_type}}(0) {{- range .bits}} |
		({{$uid_type}}(1) << {{.index}}){{end}}
	const flags = {{$uid_type}}(0) {{- range .bits}} |
		({{$uid_type}}({{if .set}}1{{else}}0{{end}}) << {{.index}}){{end}}
	return ({{$uid_type}}(id) & mask) == flags
}
{{end}}

type {{.id_type_name}}BinaryDecodingArgumentError struct {}

var _ errors.ArgumentError = {{.id_type_name}}BinaryDecodingArgumentError{}

func ({{.id_type_name}}BinaryDecodingArgumentError) ArgumentName() string {
	return ""
}

func ({{.id_type_name}}BinaryDecodingArgumentError) Error() string {
	return "{{.id_type_name}}BinaryDecodingArgumentError"
}

//TODO: FromString, (Un)MarshalText, (Un)MarshalJSON
