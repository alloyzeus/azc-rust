// {{.id_type_name}} is a scoped identifier
// used to identify an instance of entity {{.type_name}}.
type {{.id_type_name}} {{.id_def.type_name}}

// To ensure that it conforms the interfaces. If any of these is failing,
// there's a bug in the generator.
var _ {{.base.azcore_pkg}}.EID = {{.id_type_name}}Zero
var _ {{.base.azcore_pkg}}.EntityID = {{.id_type_name}}Zero
var _ {{.base.azcore_pkg}}.AZWireUnmarshalable = &{{unexported_global .id_type_name}}ZeroVar
{{- if .implements}}
var _ {{.base.azcore_pkg}}.{{.implements}}ID = {{.id_type_name}}Zero {{- end}}

// {{unexported_global .id_type_name}}SignificantBitsMask is used to
// extract significant bits from an instance of {{.id_type_name}}.
const {{unexported_global .id_type_name}}SignificantBitsMask uint{{.id_def.primitive_size}} =
	{{.id_def.significant_bits_mask}}

// {{.id_type_name}}Zero is the zero value
// for {{.id_type_name}}.
const {{.id_type_name}}Zero =
	{{.id_type_name}}(0)

// {{unexported_global .id_type_name}}ZeroVar is used for testing
// pointer-based interfaces conformance.
var {{unexported_global .id_type_name}}ZeroVar =
	{{.id_type_name}}Zero

// {{.id_type_name}}FromPrimitiveValue creates an instance
// of {{.id_type_name}} from its primitive value.
func {{.id_type_name}}FromPrimitiveValue(v {{.id_def.type_name}}) {{.id_type_name}} {
	return {{.id_type_name}}(v)
}

// {{.id_type_name}}FromAZWire creates {{.id_type_name}} from
// its azwire-encoded form.
func {{.id_type_name}}FromAZWire(b []byte) (id {{.id_type_name}}, readLen int, err error) {
	_, typ, n := protowire.ConsumeTag(b)
	if n <= 0 {
		return {{.id_type_name}}Zero, n, {{.id_type_name}}AZWireDecodingArgumentError{}
	}
	readLen = n
	if typ != protowire.VarintType {
		return {{.id_type_name}}Zero, readLen, {{.id_type_name}}AZWireDecodingArgumentError{}
	}
	e, n := protowire.ConsumeVarint(b[readLen:])
	if n <= 0 {
		return {{.id_type_name}}Zero, readLen, {{.id_type_name}}AZWireDecodingArgumentError{}
	}
	readLen += n
	return {{.id_type_name}}(e), readLen, nil
}

// PrimitiveValue returns the ID in its primitive type. Prefer to use
// this method instead of casting directly.
func (id {{.id_type_name}}) PrimitiveValue() {{.id_def.type_name}} {
	return {{.id_def.type_name}}(id)
}

// AZEID is required for conformance
// with {{.base.azcore_pkg}}.EID.
func ({{.id_type_name}}) AZEID() {}

// AZEntityID is required for conformance
// with {{.base.azcore_pkg}}.EntityID.
func ({{.id_type_name}}) AZEntityID() {}

{{if .implements -}}
// AZ{{.implements}}ID is required for conformance
// with {{.base.azcore_pkg}}.{{.implements}}ID.
func ({{.id_type_name}}) AZ{{.implements}}ID() {}

{{end -}}

// IsZero is required as {{.id_type_name}} is a value-object.
func (id {{.id_type_name}}) IsZero() bool {
	return id == {{.id_type_name}}Zero
}

// IsValid returns true if this instance is valid independently as an ID.
// It doesn't tell whether it refers to a valid instance of {{.type_name}}.
func (id {{.id_type_name}}) IsValid() bool {
	return int{{.id_def.primitive_size}}(id) > 0 &&
		(uint{{.id_def.primitive_size}}(id) & {{unexported_global .id_type_name}}SignificantBitsMask) != 0
}

// Equals is required as {{.id_type_name}} is a value-object.
//
// Use Equals{{.id_type_name}} method if the other value
// has the same type.
func (id {{.id_type_name}}) Equals(other interface{}) bool {
	if x, ok := other.({{.id_type_name}}); ok {
		return x == id
	}
	if x, _ := other.(*{{.id_type_name}}); x != nil {
		return *x == id
	}
	return false
}

// Equal is a wrapper for Equals method. It is required for
// compatibility with github.com/google/go-cmp
func (id {{.id_type_name}}) Equal(other interface{}) bool {
	return id.Equals(other)
}

// Equals{{.id_type_name}} determines if the other instance is equal
// to this instance.
func (id {{.id_type_name}}) Equals{{.id_type_name}}(
	other {{.id_type_name}},
) bool {
	return id == other
}

// AZWire returns a binary representation of the instance.
//
// AZWire is required for conformance
// with {{.base.azcore_pkg}}.AZWireObject.
func (id {{.id_type_name}}) AZWire() []byte {
	return id.AZWireField(1)
}

// AZWireField encode this instance as azwire with a specified field number.
//
// AZWire is required for conformance
// with {{.base.azcore_pkg}}.AZWireObject.
func (id {{.id_type_name}}) AZWireField(fieldNum int) []byte {
	var buf []byte
	buf = protowire.AppendTag(buf, protowire.Number(fieldNum), protowire.VarintType)
	buf = protowire.AppendVarint(buf, uint64(id))
	return buf
}

// UnmarshalAZWire is required for conformance
// with {{.base.azcore_pkg}}.AZWireUnmarshalable.
func (id *{{.id_type_name}}) UnmarshalAZWire(b []byte) (readLen int, err error) {
	var i {{.id_type_name}}
	i, readLen, err = {{.id_type_name}}FromAZWire(b)
	if err == nil {
		*id = i
	}
	return readLen, err
}

{{$uid_type := print "uint" .id_def.primitive_size}}
{{range .id_def.bitfield.sub_fields}}
// Is{{.identifier}} returns true if the {{$.type_name}} instance
// this ID is for is a {{.identifier}} {{$.type_name}}.
//
{{range .doc_lines}}// {{.}}
{{end -}}
func (id {{$.id_type_name}}) Is{{.identifier}}() bool {
	return ({{$uid_type}}(id) &
		{{.mask}}) ==
		{{.flag}}
}
{{end}}

type {{.id_type_name}}Error interface {
	error
	{{.id_type_name}}Error()
}

type {{.id_type_name}}AZWireDecodingArgumentError struct {}

var _ {{.id_type_name}}Error = {{.id_type_name}}AZWireDecodingArgumentError{}
var _ errors.ArgumentError = {{.id_type_name}}AZWireDecodingArgumentError{}

func ({{.id_type_name}}AZWireDecodingArgumentError) {{.id_type_name}}Error() {}
func ({{.id_type_name}}AZWireDecodingArgumentError) ArgumentName() string { return "" }

func ({{.id_type_name}}AZWireDecodingArgumentError) Error() string {
	return "{{.id_type_name}}AZWireDecodingArgumentError"
}

//TODO: FromString, (Un)MarshalText, (Un)MarshalJSON
