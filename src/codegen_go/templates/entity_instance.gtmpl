// {{.type_name}}InstanceService is a service which
// provides methods to manipulate an instance of {{.type_name}}.
type {{.type_name}}InstanceService interface {
	{{.type_name}}InstanceInfoService
}

// {{.type_name}}InstanceInfoService is a service which
// provides access to instances metadata.
type {{.type_name}}InstanceInfoService interface {
	// Get{{.type_name}}InstanceInfo checks if the provided
    // ref-key is valid and whether the instance is deleted.
	//
	// This method returns nil if the refKey is not referencing to any valid
	// instance.
	Get{{.type_name}}InstanceInfo(
		callCtx CallContext,
		refKey {{.ref_key_type_name}},
	) (*{{.type_name}}InstanceInfo, error)
}

// {{.type_name}}InstanceInfo holds information about
// an instance of {{.type_name}}.
type {{.type_name}}InstanceInfo struct {
    RevisionNumber int32

{{- if .lifecycle.deletion.enabled}}

    // Deletion holds information about the deletion of the instance. If
    // the instance has not been deleted, this field value will be nil.
	Deletion *{{.type_name}}InstanceDeletionInfo

{{- end}}
}

// IsActive returns true if the instance is considered as active.
func (instInfo {{.type_name}}InstanceInfo) IsActive() bool {
    // Note: we will check other flags in the future, but that's said,
    // deleted instance is considered inactive.
    return !instInfo.IsDeleted()
}

// IsDeleted returns true if the instance was deleted.
func (instInfo {{.type_name}}InstanceInfo) IsDeleted() bool {
{{- if .lifecycle.deletion.enabled}}
    return instInfo.Deletion != nil && instInfo.Deletion.Deleted
{{- else}}
	return false
{{- end}}
}

{{- if .lifecycle.deletion.enabled}}

// {{.type_name}}InstanceDeletionInfo holds information about
// the deletion of an instance if the instance has been deleted.
type {{.type_name}}InstanceDeletionInfo struct {
	Deleted       bool
{{- if .lifecycle.deletion.notes.enabled}}
	DeletionNotes string
{{- end}}
}

{{- end}}
