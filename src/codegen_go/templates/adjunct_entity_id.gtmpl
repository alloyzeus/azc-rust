// {{.id_type_name}} is a scoped identifier
// used to identify an instance of adjunct entity {{.type_name}}
// scoped within its host entity(s).
type {{.id_type_name}} {{.id_def.type_name}}

var _ {{.base.azcore_pkg}}.EID = {{.id_type_name}}Zero
var _ {{.base.azcore_pkg}}.AdjunctEntityID = {{.id_type_name}}Zero
{{if .implements -}}
var _ {{.base.azcore_pkg}}.{{.implements}}ID = {{.id_type_name}}Zero
{{- end}}

// {{.id_type_name}}Zero is the zero value for {{.id_type_name}}.
const {{.id_type_name}}Zero = {{.id_type_name}}(0)

// {{.id_type_name}}FromPrimitiveValue creates an instance
// of {{.id_type_name}} from its primitive value.
func {{.id_type_name}}FromPrimitiveValue(v {{.id_def.type_name}}) {{.id_type_name}} {
	return {{.id_type_name}}(v)
}

// PrimitiveValue returns the ID in its primitive type. Prefer to use
// this method instead of casting directly.
func (id {{.id_type_name}}) PrimitiveValue() {{.id_def.type_name}} {
	return {{.id_def.type_name}}(id)
}

// AZEID is required
// for conformance with {{.base.azcore_pkg}}.EID.
func ({{.id_type_name}}) AZEID() {}

// AZAdjunctEntityID is required
// for conformance with {{.base.azcore_pkg}}.AdjunctEntityID.
func ({{.id_type_name}}) AZAdjunctEntityID() {}

{{if .implements -}}
// AZ{{.implements}}ID is required for conformance with {{.base.azcore_pkg}}.{{.implements}}ID.
func ({{.id_type_name}}) AZ{{.implements}}ID() {}

{{end -}}

// Equals is required as {{.id_type_name}} is a value-object.
//
// Use Equals{{.id_type_name}} method if the other value
// has the same type.
func (id {{.id_type_name}}) Equals(other interface{}) bool {
	if x, ok := other.({{.id_type_name}}); ok {
		return x == id
	}
	if x, _ := other.(*{{.id_type_name}}); x != nil {
		return *x == id
	}
	return false
}

// Equal is a wrapper for Equals method. It is required for
// compatibility with github.com/google/go-cmp
func (id {{.id_type_name}}) Equal(other interface{}) bool {
	return id.Equals(other)
}

// Equals{{.id_type_name}} determines if the other instance
// is equal to this instance.
func (id {{.id_type_name}}) Equals{{.id_type_name}}(other {{.id_type_name}}) bool {
	return id == other
}
