// {{.id_type_name}} is a scoped identifier
// used to identify an instance of adjunct entity {{.type_name}}
// scoped within its host entity(s).
type {{.id_type_name}} {{.id_def.type_name}}

var _ {{.base.azcore_pkg}}.EID = {{.id_type_name}}Zero
var _ {{.base.azcore_pkg}}.AdjunctEntityID = {{.id_type_name}}Zero
{{if .implements -}}
var _ {{.base.azcore_pkg}}.{{.implements}}ID = {{.id_type_name}}Zero
{{- end}}

// {{.id_type_name}}Zero is the zero value for {{.id_type_name}}.
const {{.id_type_name}}Zero =
	{{.id_type_name}}(0)

// {{.id_type_name}}FromPrimitiveValue creates an instance
// of {{.id_type_name}} from its primitive value.
func {{.id_type_name}}FromPrimitiveValue(v {{.id_def.type_name}}) {{.id_type_name}} {
	return {{.id_type_name}}(v)
}

func {{.id_type_name}}FromAZWire(b []byte) ({{.id_type_name}}, error) {
	_, typ, n := protowire.ConsumeTag(b)
	if n <= 0 {
		return {{.id_type_name}}Zero, {{.id_type_name}}WireDecodingArgumentError{}
	}
	if typ != protowire.VarintType {
		return {{.id_type_name}}Zero, {{.id_type_name}}WireDecodingArgumentError{}
	}
	e, n := protowire.ConsumeVarint(b)
	if n <= 0 {
		return {{.id_type_name}}Zero, {{.id_type_name}}WireDecodingArgumentError{}
	}
	return {{.id_type_name}}(e), nil
}

// PrimitiveValue returns the ID in its primitive type. Prefer to use
// this method instead of casting directly.
func (id {{.id_type_name}}) PrimitiveValue() {{.id_def.type_name}} {
	return {{.id_def.type_name}}(id)
}

// AZEID is required
// for conformance with {{.base.azcore_pkg}}.EID.
func ({{.id_type_name}}) AZEID() {}

// AZAdjunctEntityID is required
// for conformance with {{.base.azcore_pkg}}.AdjunctEntityID.
func ({{.id_type_name}}) AZAdjunctEntityID() {}

{{if .implements -}}
// AZ{{.implements}}ID is required for conformance with {{.base.azcore_pkg}}.{{.implements}}ID.
func ({{.id_type_name}}) AZ{{.implements}}ID() {}

{{end -}}

// AZWire returns a binary representation of the instance.
//
// AZWire is required for conformance
// with {{.base.azcore_pkg}}.AZWireObject.
func (id {{.id_type_name}}) AZWire() []byte {
	return id.AZWireField(1)
}

// AZWireField encode this instance as azwire with a specified field number.
//
// AZWire is required for conformance
// with {{.base.azcore_pkg}}.AZWireObject.
func (id {{.id_type_name}}) AZWireField(fieldNum int) []byte {
	var buf []byte
	buf = protowire.AppendTag(buf, protowire.Number(fieldNum), protowire.VarintType)
	buf = protowire.AppendVarint(buf, uint64(id))
	return buf
}

// UnmarshalAZWire is required for conformance
// with {{.base.azcore_pkg}}.AZWireObject.
func (id *{{.id_type_name}}) UnmarshalAZWire(b []byte) error {
	i, err := {{.id_type_name}}FromAZWire(b)
	if err == nil {
		*id = i
	}
	return err
}

// AZString returns a string representation of the instance.
func (id {{.id_type_name}}) AZString() string {
	{{if eq .id_def.text_encoding.encoding "" -}}
	return "{{.id_def.text_encoding.prefix}}" + strconv.FormatInt(int64(id), 10)
	{{- else -}}
	return "{{.id_def.text_encoding.prefix}}" + {{.id_def.text_encoding.encoding}}.EncodeInt64(id)
	{{- end}}
}

// Equals is required as {{.id_type_name}} is a value-object.
//
// Use Equals{{.id_type_name}} method if the other value
// has the same type.
func (id {{.id_type_name}}) Equals(other interface{}) bool {
	if x, ok := other.({{.id_type_name}}); ok {
		return x == id
	}
	if x, _ := other.(*{{.id_type_name}}); x != nil {
		return *x == id
	}
	return false
}

// Equal is a wrapper for Equals method. It is required for
// compatibility with github.com/google/go-cmp
func (id {{.id_type_name}}) Equal(other interface{}) bool {
	return id.Equals(other)
}

// Equals{{.id_type_name}} determines if the other instance
// is equal to this instance.
func (id {{.id_type_name}}) Equals{{.id_type_name}}(
	other {{.id_type_name}},
) bool {
	return id == other
}

type {{.id_type_name}}WireDecodingArgumentError struct {}

var _ errors.ArgumentError = {{.id_type_name}}WireDecodingArgumentError{}

func ({{.id_type_name}}WireDecodingArgumentError) ArgumentName() string {
	return ""
}

func ({{.id_type_name}}WireDecodingArgumentError) Error() string {
	return "{{.id_type_name}}WireDecodingArgumentError"
}
