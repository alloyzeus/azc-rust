// {{.ref_key_type_name}} is used to identify
// an instance of adjunct entity {{.type_name}} system-wide.
type {{.ref_key_type_name}} struct {
	{{if not .global_scope -}}{{range .hosts -}}
	{{unexported_field .}} {{.}}RefKey
	{{end}}{{- end -}}
	id {{.id_type_name}}
}

// New{{.ref_key_type_name}} returns a new instance
// of {{.ref_key_type_name}} with the provided attribute values.
func New{{.ref_key_type_name}}(
	{{if not .global_scope -}}{{range .hosts -}}
	{{arg_name .}} {{.}}RefKey,
	{{end}}{{- end -}}
	id {{.id_type_name}},
) {{.ref_key_type_name}} {
	return {{.ref_key_type_name}}{
		{{if not .global_scope -}}{{- range .hosts}}
		{{unexported_field .}}: {{arg_name .}},
		{{end}}{{end -}}
		id: id,
	}
}

// To ensure that it conforms the interfaces
var _ {{.base.azcore_pkg}}.RefKey = {{unexported_global .ref_key_type_name}}Zero
var _ {{.base.azcore_pkg}}.AdjunctEntityRefKey = {{unexported_global .ref_key_type_name}}Zero
{{if .implements -}}
var _ {{.base.azcore_pkg}}.{{.implements}}RefKey = {{unexported_global .ref_key_type_name}}Zero
{{- end}}

var {{unexported_global .ref_key_type_name}}Zero = {{.ref_key_type_name}}{
	{{if not .global_scope -}}{{range .hosts -}}
	{{unexported_field .}}: {{.}}RefKeyZero(),
	{{end}}{{- end -}}
	id: {{.id_type_name}}Zero,
}

// {{.ref_key_type_name}}Zero returns
// a zero-valued instance of {{.ref_key_type_name}}.
func {{.ref_key_type_name}}Zero() {{.ref_key_type_name}} {
	return {{unexported_global .ref_key_type_name}}Zero
}

// AZRefKey is required by {{.base.azcore_pkg}}.RefKey interface.
func ({{.ref_key_type_name}}) AZRefKey() {}

// AZAdjunctEntityRefKey is required
// by {{.base.azcore_pkg}}.AdjunctEntityRefKey interface.
func ({{.ref_key_type_name}}) AZAdjunctEntityRefKey() {}

// ID is required for conformance with {{.base.azcore_pkg}}.RefKey.
func (refKey {{.ref_key_type_name}}) ID() {{.base.azcore_pkg}}.EID {
	return refKey.id
}

{{if .implements -}}
// {{.implements}}ID is required for conformance with {{.base.azcore_pkg}}.{{.implements}}RefKey.
func (refKey {{.ref_key_type_name}}) {{.implements}}ID() {{.base.azcore_pkg}}.{{.implements}}ID {
	return refKey.id
}

{{end -}}

// IsZero is required as {{.ref_key_type_name}} is a value-object.
func (refKey {{.ref_key_type_name}}) IsZero() bool {
	return {{if not .global_scope -}}{{range .hosts}}refKey.{{unexported_field .}}.IsZero() &&
		{{end}}{{- end -}} refKey.id == {{.id_type_name}}Zero
}

// Equals is required for conformance with {{.base.azcore_pkg}}.AdjunctEntityRefKey.
func (refKey {{.ref_key_type_name}}) Equals(other interface{}) bool {
	if x, ok := other.({{.ref_key_type_name}}); ok {
		return {{if not .global_scope -}}{{range .hosts}}refKey.{{unexported_field .}}.Equals{{.}}RefKey(x.{{unexported_field .}}) &&
			{{end}}{{- end -}} refKey.id == x.id
	}
	if x, _ := other.(*{{.ref_key_type_name}}); x != nil {
		return {{if not .global_scope -}}{{range .hosts}}refKey.{{unexported_field .}}.Equals{{.}}RefKey(x.{{unexported_field .}}) &&
			{{end}}{{- end -}} refKey.id == x.id
	}
	return false
}

// Equal is required for conformance with {{.base.azcore_pkg}}.AdjunctEntityRefKey.
func (refKey {{.ref_key_type_name}}) Equal(other interface{}) bool {
	return refKey.Equals(other)
}

// Equals{{.ref_key_type_name}} returns true
// if the other value has the same attributes as refKey.
func (refKey {{.ref_key_type_name}}) Equals{{.ref_key_type_name}}(
	other {{.ref_key_type_name}},
) bool {
	return {{if not .global_scope -}}{{range .hosts}}refKey.{{unexported_field .}}.Equals{{.}}RefKey(other.{{unexported_field .}}) &&
		{{end}}{{- end -}} refKey.id == other.id
}

// AZWire is required for conformance
// with {{.base.azcore_pkg}}.AZWireObject.
func (refKey {{.ref_key_type_name}}) AZWire() []byte {
	return refKey.AZWireField(1)
}

// AZWireField is required for conformance
// with {{.base.azcore_pkg}}.AZWireObject.
func (refKey {{.ref_key_type_name}}) AZWireField(fieldNum int) []byte {
	{{if not .global_scope -}}{{if .hosts -}}
	buf := &bytes.Buffer{}
	var fieldWire []byte
	{{range $i, $h := .hosts -}}
	fieldWire = refKey.application.AZWireField({{$i}} + 1)
	buf.Write(fieldWire)
	{{- end}}
	fieldWire = refKey.id.AZWireField({{len .hosts}} + 1)
	buf.Write(fieldWire)
	var outBuf []byte
	outBuf = protowire.AppendTag(outBuf,
		protowire.Number(fieldNum), protowire.BytesType)
	outBuf = protowire.AppendBytes(outBuf, buf.Bytes())
	return outBuf
	{{- end}}{{- else -}}
	return refKey.id.AZWireField(fieldNum)
	{{- end}}
}

// AZString returns an encoded representation of this instance.
//
// AZString is required for conformance
// with {{.base.azcore_pkg}}.RefKey.
func (refKey {{.ref_key_type_name}}) AZString() string {
	wire := refKey.AZWire()
	//TODO: configurable encoding
	return "{{.ref_key_def.string_prefix}}-" + hex.EncodeToString(wire)
}

{{if not .global_scope}}{{range .hosts -}}

// {{.}} returns instance's {{.}} value.
func (refKey {{$.ref_key_type_name}}) {{.}}() {{.}}RefKey {
	return refKey.{{unexported_field .}}
}

// With{{.}} returns a copy
// of {{$.ref_key_type_name}}
// with its {{unexported_field .}} attribute set to the provided value.
func (refKey {{$.ref_key_type_name}}) With{{.}}(
	{{arg_name .}} {{.}}RefKey,
) {{$.ref_key_type_name}} {
	{{- $p := .}}
	return {{$.ref_key_type_name}}{
		{{- range $.hosts}}{{if eq . $p}}
		{{unexported_field .}}: {{arg_name .}},{{else}}
		{{unexported_field .}}: attrs.{{unexported_field .}},{{end}}{{- end}}
	}
}

{{end}}{{end -}}
