// {{.ref_key_type_name}} is used to identify
// an instance of adjunct entity {{.type_name}} system-wide.
type {{.ref_key_type_name}} struct {
	{{if not .global_scope -}}{{range .hosts -}}
	{{unexported_field .}} {{.}}RefKey
	{{end}}{{- end -}}
	id {{.id_type_name}}
}

// New{{.ref_key_type_name}} returns a new instance
// of {{.ref_key_type_name}} with the provided attribute values.
func New{{.ref_key_type_name}}(
	{{if not .global_scope -}}{{range .hosts -}}
	{{arg_name .}} {{.}}RefKey,
	{{end}}{{- end -}}
	id {{.id_type_name}},
) {{.ref_key_type_name}} {
	return {{.ref_key_type_name}}{
		{{if not .global_scope -}}{{- range .hosts -}}
		{{unexported_field .}}: {{arg_name .}},
		{{end}}{{end -}}
		id: id,
	}
}

// To ensure that it conforms the interfaces. If any of these is failing,
// there's a bug in the generator.
var _ {{.base.azcore_pkg}}.RefKey = {{unexported_global .ref_key_type_name}}Zero
var _ {{.base.azcore_pkg}}.AdjunctEntityRefKey = {{unexported_global .ref_key_type_name}}Zero
var _ {{.base.azcore_pkg}}.AZWireUnmarshalable = &{{unexported_global .ref_key_type_name}}Zero
var _ {{.base.azcore_pkg}}.AZISUnmarshalable = &{{unexported_global .ref_key_type_name}}Zero
{{if .implements -}}
var _ {{.base.azcore_pkg}}.{{.implements}}RefKey = {{unexported_global .ref_key_type_name}}Zero
{{- end}}

var {{unexported_global .ref_key_type_name}}Zero = {{.ref_key_type_name}}{
	{{if not .global_scope -}}{{range .hosts -}}
	{{unexported_field .}}: {{.}}RefKeyZero(),
	{{end}}{{- end -}}
	id: {{.id_type_name}}Zero,
}

// {{.ref_key_type_name}}Zero returns
// a zero-valued instance of {{.ref_key_type_name}}.
func {{.ref_key_type_name}}Zero() {{.ref_key_type_name}} {
	return {{unexported_global .ref_key_type_name}}Zero
}

// AZRefKey is required by {{.base.azcore_pkg}}.RefKey interface.
func ({{.ref_key_type_name}}) AZRefKey() {}

// AZAdjunctEntityRefKey is required
// by {{.base.azcore_pkg}}.AdjunctEntityRefKey interface.
func ({{.ref_key_type_name}}) AZAdjunctEntityRefKey() {}

// ID is required for conformance with {{.base.azcore_pkg}}.RefKey.
func (refKey {{.ref_key_type_name}}) ID() {{.base.azcore_pkg}}.EID {
	return refKey.id
}

{{if .implements -}}
// {{.implements}}ID is required for conformance with {{.base.azcore_pkg}}.{{.implements}}RefKey.
func (refKey {{.ref_key_type_name}}) {{.implements}}ID() {{.base.azcore_pkg}}.{{.implements}}ID {
	return refKey.id
}

{{end -}}

// IsZero is required as {{.ref_key_type_name}} is a value-object.
func (refKey {{.ref_key_type_name}}) IsZero() bool {
	return {{if not .global_scope -}}{{range .hosts}}refKey.{{unexported_field .}}.IsZero() &&
		{{end}}{{- end -}} refKey.id == {{.id_type_name}}Zero
}

// IsValid returns true if this instance is valid independently as a ref-key.
// It doesn't tell whether it refers to a valid instance of {{.type_name}}.
func (refKey {{.ref_key_type_name}}) IsValid() bool {
	return {{if not .global_scope -}}{{range .hosts}}refKey.{{unexported_field .}}.IsValid() &&
		{{end}}{{- end -}} refKey.id.IsValid()
}

// Equals is required for conformance with {{.base.azcore_pkg}}.AdjunctEntityRefKey.
func (refKey {{.ref_key_type_name}}) Equals(other interface{}) bool {
	if x, ok := other.({{.ref_key_type_name}}); ok {
		return {{if not .global_scope -}}{{range .hosts}}refKey.{{unexported_field .}}.Equals{{.}}RefKey(x.{{unexported_field .}}) &&
			{{end}}{{- end -}} refKey.id == x.id
	}
	if x, _ := other.(*{{.ref_key_type_name}}); x != nil {
		return {{if not .global_scope -}}{{range .hosts}}refKey.{{unexported_field .}}.Equals{{.}}RefKey(x.{{unexported_field .}}) &&
			{{end}}{{- end -}} refKey.id == x.id
	}
	return false
}

// Equal is required for conformance with {{.base.azcore_pkg}}.AdjunctEntityRefKey.
func (refKey {{.ref_key_type_name}}) Equal(other interface{}) bool {
	return refKey.Equals(other)
}

// Equals{{.ref_key_type_name}} returns true
// if the other value has the same attributes as refKey.
func (refKey {{.ref_key_type_name}}) Equals{{.ref_key_type_name}}(
	other {{.ref_key_type_name}},
) bool {
	return {{if not .global_scope -}}{{range .hosts}}refKey.{{unexported_field .}}.Equals{{.}}RefKey(other.{{unexported_field .}}) &&
		{{end}}{{- end -}} refKey.id == other.id
}

// AZWire is required for conformance
// with {{.base.azcore_pkg}}.AZWireObject.
func (refKey {{.ref_key_type_name}}) AZWire() []byte {
	return refKey.AZWireField(1)
}

// AZWireField is required for conformance
// with {{.base.azcore_pkg}}.AZWireObject.
func (refKey {{.ref_key_type_name}}) AZWireField(fieldNum int) []byte {
	{{if not .global_scope -}}{{if .hosts -}}
	buf := &bytes.Buffer{}
	var fieldWire []byte

	{{range $i, $h := .hosts -}}
	fieldWire = refKey.application.AZWireField({{$i}} + 1)
	buf.Write(fieldWire)
	{{- end}}
	
	fieldWire = refKey.id.AZWireField({{len .hosts}} + 1)
	buf.Write(fieldWire)
	var outBuf []byte
	outBuf = protowire.AppendTag(outBuf,
		protowire.Number(fieldNum), protowire.BytesType)
	outBuf = protowire.AppendBytes(outBuf, buf.Bytes())
	return outBuf
	{{- end}}{{- else -}}
	return refKey.id.AZWireField(fieldNum)
	{{- end}}
}

// {{.ref_key_type_name}}FromAZWire creates {{.ref_key_type_name}} from
// its azwire-encoded form.
func {{.ref_key_type_name}}FromAZWire(
	b []byte,
) (
	refKey {{.ref_key_type_name}},
	readLen int,
	err error,
) {
	var readOffset int = 0
	_, typ, n := protowire.ConsumeTag(b)
	if n <= 0 {
		return {{.ref_key_type_name}}Zero(), readOffset, {{.ref_key_type_name}}AZWireDecodingArgumentError{}
	}
	readOffset += n
	if typ != protowire.BytesType {
		return {{.ref_key_type_name}}Zero(), readOffset, {{.ref_key_type_name}}AZWireDecodingArgumentError{}
	}
	_, n = protowire.ConsumeVarint(b[readOffset:])
	if n <= 0 {
		return {{.ref_key_type_name}}Zero(), readOffset, {{.ref_key_type_name}}AZWireDecodingArgumentError{}
	}
	readOffset += n

	{{if not .global_scope -}}{{range .hosts -}}
	{{unexported_field .}}, fieldLen, err := {{.}}RefKeyFromAZWire(b[readOffset:])
	if err != nil {
		return {{$.ref_key_type_name}}Zero(), readOffset, {{$.ref_key_type_name}}AZWireDecodingArgumentError{}
	}
	readOffset += fieldLen

	{{end}}{{- end -}}

	id, fieldLen, err := {{.id_type_name}}FromAZWire(b[readOffset:])
	if err != nil {
		return {{.ref_key_type_name}}Zero(), readOffset, {{.ref_key_type_name}}AZWireDecodingArgumentError{}
	}
	readOffset += fieldLen

	return {{.ref_key_type_name}}{
		{{if not .global_scope -}}{{- range .hosts -}}
		{{unexported_field .}}: {{arg_name .}},
		{{end}}{{end -}}
		id:          id,
	}, readOffset, nil
}

func (refKey *{{.ref_key_type_name}}) UnmarshalAZWire(b []byte) (readLen int, err error) {
	var r {{.ref_key_type_name}}
	r, readLen, err = {{.ref_key_type_name}}FromAZWire(b)
	if err == nil {
		*refKey = r
	}
	return readLen, err
}

const {{unexported_global .ref_key_type_name}}AZISPrefix = "{{.ref_key_def.azis.prefix}}"

// {{.ref_key_type_name}}FromAZIS creates {{.ref_key_type_name}} from
// its AZIS-encoded form.
func {{.ref_key_type_name}}FromAZIS(s string) ({{.ref_key_type_name}}, error) {
	if s == "" {
		return {{.ref_key_type_name}}Zero(), nil
	}
	if !strings.HasPrefix(s, {{unexported_global .ref_key_type_name}}AZISPrefix) {
		return {{.ref_key_type_name}}Zero(), {{.ref_key_type_name}}AZISDecodingArgumentError{}
	}
	s = strings.TrimPrefix(s, {{unexported_global .ref_key_type_name}}AZISPrefix)
	b, err := hex.DecodeString(s)
	if err != nil {
		return {{.ref_key_type_name}}Zero(), {{.ref_key_type_name}}AZISDecodingArgumentError{}
	}
	refKey, _, err := {{.ref_key_type_name}}FromAZWire(b)
	if err != nil {
		return {{.ref_key_type_name}}Zero(), {{.ref_key_type_name}}AZISDecodingArgumentError{}
	}
	return refKey, nil
}

// AZIS returns an encoded representation of this instance. It returns empty
// if IsValid returned false.
//
// AZIS is required for conformance
// with {{.base.azcore_pkg}}.RefKey.
func (refKey {{.ref_key_type_name}}) AZIS() string {
	if !refKey.IsValid() {
		return ""
	}
	wire := refKey.AZWire()
	//TODO: configurable encoding
	return {{unexported_global .ref_key_type_name}}AZISPrefix +
		hex.EncodeToString(wire)
}

// UnmarshalAZIS is required for conformance
// with {{.base.azcore_pkg}}.AZISUnmarshalable.
func (refKey *{{.ref_key_type_name}}) UnmarshalAZIS(s string) error {
	r, err := {{.ref_key_type_name}}FromAZIS(s)
	if err == nil {
		*refKey = r
	}
	return err
}

{{if not .global_scope}}{{range .hosts -}}

// {{.}} returns instance's {{.}} value.
func (refKey {{$.ref_key_type_name}}) {{.}}() {{.}}RefKey {
	return refKey.{{unexported_field .}}
}

// With{{.}} returns a copy
// of {{$.ref_key_type_name}}
// with its {{unexported_field .}} attribute set to the provided value.
func (refKey {{$.ref_key_type_name}}) With{{.}}(
	{{arg_name .}} {{.}}RefKey,
) {{$.ref_key_type_name}} {
	{{- $p := .}}
	return {{$.ref_key_type_name}}{
		{{- range $.hosts}}{{if eq . $p}}
		{{unexported_field .}}: {{arg_name .}},{{else}}
		{{unexported_field .}}: attrs.{{unexported_field .}},{{end}}{{- end}}
	}
}

{{end}}{{end -}}

type {{.ref_key_type_name}}Error interface {
	error
	{{.ref_key_type_name}}Error()
}

type {{.ref_key_type_name}}AZWireDecodingArgumentError struct {}

var _ {{.ref_key_type_name}}Error = {{.ref_key_type_name}}AZWireDecodingArgumentError{}
var _ errors.ArgumentError = {{.ref_key_type_name}}AZWireDecodingArgumentError{}

func ({{.ref_key_type_name}}AZWireDecodingArgumentError) {{.ref_key_type_name}}Error() {}
func ({{.ref_key_type_name}}AZWireDecodingArgumentError) ArgumentName() string { return "" }

func ({{.ref_key_type_name}}AZWireDecodingArgumentError) Error() string {
	return "{{.ref_key_type_name}}AZWireDecodingArgumentError"
}

type {{.ref_key_type_name}}AZISDecodingArgumentError struct {}

var _ {{.ref_key_type_name}}Error = {{.ref_key_type_name}}AZISDecodingArgumentError{}
var _ errors.ArgumentError = {{.ref_key_type_name}}AZISDecodingArgumentError{}

func ({{.ref_key_type_name}}AZISDecodingArgumentError) {{.ref_key_type_name}}Error() {}
func ({{.ref_key_type_name}}AZISDecodingArgumentError) ArgumentName() string { return "" }

func ({{.ref_key_type_name}}AZISDecodingArgumentError) Error() string {
	return "{{.ref_key_type_name}}AZISDecodingArgumentError"
}
