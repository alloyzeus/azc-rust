package {{.pkg_name}}server

import (
	"crypto/rand"
	"database/sql"
	"encoding/binary"

	{{.base.azerrs_pkg}} "{{.base.azerrs_import}}"
	lru "github.com/hashicorp/golang-lru"

	"{{.pkg_path}}"
)

const (
	{{unexported_field .type_name}}DBTableName           = "{{.type_name_snake}}_dt"
	{{unexported_field .type_name}}DBTablePrimaryKeyName = {{unexported_field .type_name}}DBTableName + "_pkey"
)

// {{.service_name}}Serverbase is the server-side
// base implementation of {{.service_name}}.
type {{.service_name}}ServerBase struct {
	db *sql.DB

	deletionTxHook func(
		ctx {{.base.service_op_call_context_type_name}},
		deletionTx *sql.Tx, instanceIDBeingDeleted ...{{.pkg_name}}.{{.ref_key_type_name}}) error
	deletionHook func(
		ctx {{.base.service_op_call_context_type_name}},
		instanceIDDeleted ...{{.pkg_name}}.{{.ref_key_type_name}}) error

	registered{{.ref_key_type_name}}Cache *lru.ARCCache
	deleted{{.ref_key_type_name}}Cache    *lru.ARCCache
}

// Interface conformance assertions.
var (
	_ {{.pkg_name}}.{{.service_name}} = &{{.service_name}}ServerBase{}
	_ {{.pkg_name}}.{{.type_name}}InstanceServiceInternal = &{{.service_name}}ServerBase{}
)

func (srv *{{.service_name}}ServerBase) Is{{.ref_key_type_name}}Registered(
	id {{.pkg_name}}.{{.ref_key_type_name}},
) bool {
	idStr := id.AZIDText()

	// Look up for the ID num in the cache.
	if _, idRegistered := srv.registered{{.ref_key_type_name}}Cache.Get(idStr); idRegistered {
		return true
	}

	idRegistered, _, err := srv.
		get{{.type_name}}InstanceStateByID(id)
	if err != nil {
		panic(err)
	}

	if idRegistered {
		srv.registered{{.ref_key_type_name}}Cache.Add(idStr, nil)
	}

	return idRegistered
}

// Get{{.type_name}}InstanceState retrieves the state of an {{.type_name}}
// instance. It includes the existence of the ID, and whether the instance
// has been deleted.
//
// If it's required only to determine the existence of the ID,
// Is{{.ref_key_type_name}}Registered is generally more efficient.
func (srv *{{.service_name}}ServerBase) Get{{.type_name}}InstanceState(
	ctx {{.base.service_op_call_context_type_name}},
	id {{.pkg_name}}.{{.ref_key_type_name}},
) (*{{.pkg_name}}.{{.type_name}}InstanceState, error) {
	//TODO: access control
	return srv.get{{.type_name}}InstanceStateInsecure(ctx, id)
}

func (srv *{{.service_name}}ServerBase) get{{.type_name}}InstanceStateInsecure(
	ctx {{.base.service_op_call_context_type_name}},
	id {{.pkg_name}}.{{.ref_key_type_name}},
) (*{{.pkg_name}}.{{.type_name}}InstanceState, error) {
	idRegistered := false
	idRegisteredCacheHit := false
	instDeleted := false
	instDeletionCacheHit := false
	idStr := id.AZIDText()

	// Look up for the ID num in the cache.
	if _, idRegistered = srv.registered{{.ref_key_type_name}}Cache.Get(idStr); idRegistered {
		// ID num is positively registered.
		idRegisteredCacheHit = true
	}

	// Look up in the deletion cache
	if _, instDeleted = srv.deleted{{.ref_key_type_name}}Cache.Get(idStr); instDeleted {
		// Instance is positively deleted
		instDeletionCacheHit = true
	}

	if idRegisteredCacheHit && instDeletionCacheHit {
		if !idRegistered {
			return nil, nil
		}
		var deletion *{{.pkg_name}}.{{.type_name}}DeletionState
		if instDeleted {
			deletion = &{{.pkg_name}}.{{.type_name}}DeletionState{
				Deleted_: true}
		}
		//TODO: populate revision number
		return &{{.pkg_name}}.{{.type_name}}InstanceState{
			Deletion_: deletion,
		}, nil
	}

	var err error
	idRegistered, instDeleted, err = srv.
		get{{.type_name}}InstanceStateByID(id)
	if err != nil {
		return nil, err
	}

	if !idRegisteredCacheHit && idRegistered {
		srv.registered{{.ref_key_type_name}}Cache.Add(idStr, nil)
	}
	if !instDeletionCacheHit && instDeleted {
		srv.deleted{{.ref_key_type_name}}Cache.Add(idStr, nil)
	}

	if !idRegistered {
		return nil, nil
	}

	var deletion *{{.pkg_name}}.{{.type_name}}DeletionState
	if instDeleted {
		//TODO: deletion notes. store the notes as the value in the cache
		deletion = &{{.pkg_name}}.{{.type_name}}DeletionState{
			Deleted_: true}
	}

	//TODO: populate revision number
	return &{{.pkg_name}}.{{.type_name}}InstanceState{
		RevisionNumber_: -1,
		Deletion_:       deletion,
	}, nil
}

func (srv *{{.service_name}}ServerBase) get{{.type_name}}InstanceStateByID(
	id {{.pkg_name}}.{{.ref_key_type_name}},
) (idRegistered, instanceDeleted bool, err error) {
	sqlString, _, _ := goqu.From({{unexported_field .type_name}}DBTableName).
		Select(
			goqu.Case().
				When(goqu.C({{unexported_field .type_name}}DBColMDDeletionTimestamp).IsNull(), false).
				Else(true).
				As("deleted"),
		).
		Where(
			{{if not .id_is_id_num -}}{{range .hosts -}}
			goqu.C({{unexported_field $.type_name}}DBCol{{.id_name}}).Eq(id.{{.identifier_name}}().IDNum().PrimitiveValue()),
			{{end}}{{- end -}}
			goqu.C({{unexported_field .type_name}}DBColIDNum).Eq(id.IDNum().PrimitiveValue()),
		).
		ToSQL()

	err = srv.db.
		QueryRow(sqlString).
		Scan(&instanceDeleted)
	if err == sql.ErrNoRows {
		return false, false, nil
	}
	if err != nil {
		return false, false, err
	}

	return true, instanceDeleted, nil
}

func (srv *{{.service_name}}ServerBase) Delete{{.type_name}}Internal(
	ctx {{.base.service_op_call_context_type_name}},
	instanceIDToDelete {{.pkg_name}}.{{.ref_key_type_name}},
	input {{.pkg_name}}.{{.type_name}}DeletionInput,
) (justDeleted bool, currentState {{.pkg_name}}.{{.type_name}}InstanceState, err error) {
	if ctx == nil {
		return false, {{.pkg_name}}.{{.type_name}}InstanceStateZero(), nil
	}

{{- /*TODO: only if it's trully implement User */}}
{{- if eq .type_name "User"}}
	ctxAuth := ctx.Authorization()
	if !ctxAuth.IsUser(instanceIDToDelete) {
		return false, {{.pkg_name}}.{{.type_name}}InstanceStateZero(), nil //TODO: should be an error
	}
{{- end}}

	//TODO: access control

	return srv.delete{{.type_name}}Insecure(ctx, instanceIDToDelete, input)
}

func (srv *{{.service_name}}ServerBase) delete{{.type_name}}Insecure(
	ctx {{.base.service_op_call_context_type_name}},
	instanceIDToDelete {{.pkg_name}}.{{.ref_key_type_name}},
	input {{.pkg_name}}.{{.type_name}}DeletionInput,
) (justDeleted bool, currentState {{.pkg_name}}.{{.type_name}}InstanceState, err error) {
	ctxAuth := ctx.Authorization()
	ctxTime := ctx.CallInputMetadata().ReceiveTime

	err = doTx(srv.db, func(dbTx *sql.Tx) error {
		sqlString, _, _ := goqu.
			From({{unexported_field .type_name}}DBTableName).
			Where(
				{{if not .id_is_id_num -}}{{range .hosts -}}
				goqu.C({{unexported_field $.type_name}}DBCol{{.id_name}}).Eq(instanceIDToDelete.{{.identifier_name}}().IDNum().PrimitiveValue()),
				{{end}}{{- end -}}
				goqu.C({{unexported_field .type_name}}DBColIDNum).Eq(instanceIDToDelete.IDNum().PrimitiveValue()),
				goqu.C({{unexported_field .type_name}}DBColMDDeletionTimestamp).IsNull(),
			).
			Update().
			Set(
				goqu.Record{
					{{unexported_field .type_name}}DBColMDDeletionTimestamp: ctxTime,
					{{unexported_field .type_name}}DBColMDDeletionTerminalID: ctxAuth.TerminalIDNum().PrimitiveValue(),
					{{unexported_field .type_name}}DBColMDDeletionUserID: ctxAuth.UserIDNum().PrimitiveValue(),
					{{- if .lifecycle.deletion.notes.enabled}}
					{{unexported_field .type_name}}DBColMDDeletionNotes: input.DeletionNotes,
					{{- end}}
				},
			).
			ToSQL()

		xres, txErr := dbTx.
			Exec(sqlString)
		if txErr != nil {
			return txErr
		}
		n, txErr := xres.RowsAffected()
		if txErr != nil {
			return txErr
		}
		justDeleted = n == 1

		if cb := srv.deletionTxHook; cb != nil {
			return cb(ctx, dbTx, instanceIDToDelete)
		}

		return nil
	})
	if err != nil {
		return false, {{.pkg_name}}.{{.type_name}}InstanceStateZero(), err
	}

	var deletion *{{.pkg_name}}.{{.type_name}}DeletionState
	if justDeleted {
		deletion = &{{.pkg_name}}.{{.type_name}}DeletionState{
			Deleted_: true,
			{{- if .lifecycle.deletion.notes.enabled}}
			DeletionNotes_: input.DeletionNotes,
			{{- end -}}
		}
		if cb := srv.deletionHook; cb != nil {
			cb(ctx, instanceIDToDelete)
		}
	} else {
		di, err := srv.get{{.type_name}}InstanceStateInsecure(ctx, instanceIDToDelete)
		if err != nil {
			return false, {{.pkg_name}}.{{.type_name}}InstanceStateZero(), err
		}

		if di != nil {
			deletion = di.Deletion()
		}
	}

	currentState = {{.pkg_name}}.{{.type_name}}InstanceState{
		RevisionNumber_: -1, //TODO: get from the DB
		Deletion_:       deletion}

	//TODO: update caches, emit an event if there's any changes

	return justDeleted, currentState, nil
}

const (
	// Creation metadata columns
	{{unexported_field .type_name}}DBColMDCreationTimestamp  = "md_cr_ts"
	{{unexported_field .type_name}}DBColMDCreationTerminalID = "md_cr_tid"
	{{unexported_field .type_name}}DBColMDCreationUserID     = "md_cr_uid"
	{{- if .lifecycle.deletion.enabled}}
	// Deletion metadata columns
	{{unexported_field .type_name}}DBColMDDeletionTimestamp  = "md_del_ts"
	{{unexported_field .type_name}}DBColMDDeletionTerminalID = "md_del_tid"
	{{unexported_field .type_name}}DBColMDDeletionUserID     = "md_del_uid"
	{{- if .lifecycle.deletion.notes.enabled}}
	{{unexported_field .type_name}}DBColMDDeletionNotes      = "md_del_notes"
	{{- end}}
	{{- end}}
	{{- if .lifecycle.expiration.enabled}}
	// Expiration
	{{unexported_field .type_name}}DBColExpiry = "expiry"
	{{- end}}

	{{- if .attributes}}

	// Inline attributes
	{{- range .attributes}}
	{{unexported_field $.type_name}}DBCol{{.identifier}} = "{{.db_col_name}}"
	{{- end}}
	{{- end}}

	// Identity
	{{unexported_field .type_name}}DBColIDNum = "id_num"
	{{- range .hosts}}
	{{unexported_field $.type_name}}DBCol{{.id_name}} = "{{.db_col_name}}"
	{{- end}}
)

{{- /* TODO: generate the following generator function only when the id num is random */}}

// Generate{{.id_num_type_name}} generates a new {{.pkg_name}}.{{.id_num_type_name}}.
// Note that this function does not consult any database nor registry.
// This method will not create an instance of {{.pkg_name}}.{{.type_name}}, i.e., the
// resulting {{.pkg_name}}.{{.id_num_type_name}} might or might not refer to valid instance
// of {{.pkg_name}}.{{.type_name}}. The resulting {{.pkg_name}}.{{.id_num_type_name}} is designed to be
// used as an argument to create a new instance of {{.pkg_name}}.{{.type_name}}.
//
// The embeddedFieldBits argument could be constructed by combining
// {{.pkg_name}}.{{.id_num_type_name}}*Bits constants. If none are defined,
// use the value of 0.
func Generate{{.id_num_type_name}}(
	embeddedFieldBits u{{.id_num_def.type_name}},
) ({{.pkg_name}}.{{.id_num_type_name}}, error) {
	idBytes := make([]byte, {{.id_num_def.primitive_size_bytes}})
	_, err := rand.Read(idBytes)
	if err != nil {
		return {{.pkg_name}}.{{.id_num_type_name}}Zero, {{.base.azerrs_pkg}}.Op("random number source reading").Wrap(err)
	}

	idUint := (embeddedFieldBits & {{.pkg_name}}.{{.id_num_type_name}}EmbeddedFieldsMask) |
		(binary.BigEndian.U{{.id_num_def.type_name}}(idBytes) & {{.pkg_name}}.{{.id_num_type_name}}IdentifierBitsMask)
	return {{.pkg_name}}.{{.id_num_type_name}}(idUint), nil
}
