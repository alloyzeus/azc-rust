// {{.service_name}} provides a contract
// for methods related to entity {{.type_name}}.
type {{.service_name}} interface {
	{{.base.azlib_prefix}}EntityService

	Observe{{.type_name}}Events(
		{{.type_name}}EventsObserveInput,
	) {{.type_name}}EventsObserveOutput

	{{- if .lifecycle.creation.allow_cross_process_callers}}
	Create{{.type_name}}(
		{{.type_name}}CreateRequest,
	) {{.type_name}}CreateResponse

	{{- end}}

	{{- /* TODO: this interface should be dynamically filled by mixins */}}
}

// {{.type_name}}EventsObserveInput is the input
// type for Observe{{.type_name}}Events method in
// {{.service_name}}.
type {{.type_name}}EventsObserveInput struct {}

// {{.type_name}}EventsObserveOutput is the output
// type for Observe{{.type_name}}Events method in
// {{.service_name}}.
//
//TODO: the output should contain a field which is an instance of Rx Observable.
// See http://reactivex.io/documentation/contract.html and
// https://pkg.go.dev/github.com/reactivex/rxgo/v2#Observable .
type {{.type_name}}EventsObserveOutput struct {}

type {{.type_name}}CreateEvent struct {
	//TODO: context?
	{{.base.azlib_prefix}}EntityCreationEventBase

	// TODO
}

var _ {{.type_name}}Event = {{.type_name}}CreateEvent{}

// {{.type_name}}Event is required by {{.type_name}}Event interface.
func (evt {{.type_name}}CreateEvent) {{.type_name}}Event() {{.type_name}}Event {
	return evt
}

{{- if .lifecycle.creation.allow_cross_process_callers}}

// {{.type_name}}CreateRequest is for use in Create{{.type_name}} method of {{.service_name}}.
type {{.type_name}}CreateRequest struct {
	Context {{.base.azlib_prefix}}EntityCreationRequestContext
	Parameters {{.type_name}}CreateRequestParameters
}

type {{.type_name}}CreateRequestParameters struct {
	// TODO
}

type {{.type_name}}CreateResponse struct {
	Context {{.base.azlib_prefix}}EntityCreationResponseContext
	Parameters {{.type_name}}CreateResponseParameters
}

type {{.type_name}}CreateResponseParameters struct {
	RefKey {{.ref_key_type_name}}
	CreationInfo *{{.base.azlib_prefix}}EntityCreationInfo

	// TODO
}

{{- end}}
