package {{.pkg_name}}

import (
	{{.base.azcore_pkg}} "{{.base.azcore_import}}"
)

// {{.ref_key_type_name}} is used to identify
// an instance of {{.type_name}} system-wide.
type {{.ref_key_type_name}} {{.id_type_name}}

const _{{.ref_key_type_name}}Zero = {{.ref_key_type_name}}({{.id_type_name}}Zero)
var _ {{.base.azcore_pkg}}.RefKey = _{{.ref_key_type_name}}Zero
var _ {{.base.azcore_pkg}}.EntityRefKey = _{{.ref_key_type_name}}Zero

// {{.ref_key_type_name}}Zero returns a zero-valued instance of {{.ref_key_type_name}}.
func {{.ref_key_type_name}}Zero() {{.ref_key_type_name}} { return _{{.ref_key_type_name}}Zero }

// AZRefKey is required by {{.base.azcore_pkg}}.RefKey interface.
func (refKey {{.ref_key_type_name}}) AZRefKey() {{.base.azcore_pkg}}.RefKey { return refKey }

// AZEntityRefKey is required by {{.base.azcore_pkg}}.EntityRefKey interface.
func (refKey {{.ref_key_type_name}}) AZEntityRefKey() {{.base.azcore_pkg}}.EntityRefKey { return refKey }

// IsZero is required as {{.ref_key_type_name}} is a value-object.
func (refKey {{.ref_key_type_name}}) IsZero() bool {
	return {{.id_type_name}}(refKey) == {{.id_type_name}}Zero
}

// Equals is required as {{.ref_key_type_name}} is a value-object.
func (refKey {{.ref_key_type_name}}) Equals(other interface{}) bool {
	if x, ok := other.({{.ref_key_type_name}}); ok {
		return x == refKey
	}
	if x, _ := other.(*{{.ref_key_type_name}}); x != nil {
		return *x == refKey
	}
	return false
}
