module: iam
symbols:

  - identifier: User
    # This defines what this entity's role in the system. In a system, a role
    # can have only one concrete. Not to be confused with 'role' in access
    # control.
    abstract: User
    kind: entity
    parameters:
      id:
        # Options: integer(space), uuid(version), string
        type: integer
        parameters:
          space: 48
        generator:
          # Other options: ShardedRandomIntegerGenerator
          # The option for generator is defined by the registered generators
          # to the compiler.
          # Root entities can only use random generators.
          name: LocalRandomIntegerIDGenerator
          parameters:
            encodings:
              text:
                prefix: "ix-"
      mixins:
        - kind: Deletion
          parameters:
            event_hooks:
              enabled: true
      service:
        enabled: true
        methods:
          # Creation of an entity
          creation:
            # The authorization definition for the creation method.
            authorization:
              # Here, we allow creation from the same service process
              - kind: intraprocess
                allow: always
        api:
          protocols:
            #?RFC: versioning?
            rest:
              enabled: true
            grpc:
              enabled: true

  - identifier: IdentifierPhoneNumber
    kind: adjunct
    parameters:
      hosts:
        - name: User
      kind: value-object
      parameters:
        kind: PhoneNumber
        unique: true

  - identifier: Application
    kind: entity
    parameters:
      mixins:
        - kind: Ownership
          parameters:
            owner_arity:
              # overridable means that the configuration could be overriden
              # through, e.g., environment variables or config server.
              # RFC: should we, instead making these value here as value
              # available in config server?
              overridable: true
              value:
                min: 1
                max: 4
      attributes:
        access_keys:
          # A set of AccessKey with uniqueness is defined by the field id
          # by default, we use object's defined key, or we will use the
          # equality trait (value objects are required to provide equality
          # operator)
          kind: set
          parameters:
            kind: AccessKey
            key_fields: [id]
            arity:
              min: 0
              max: 4

  - identifier: Terminal
    description: |
      A terminal is an authorized instance of application.
    kind: adjunct
    parameters:
      kind: entity
      # At least one
      hosts:
        - name: Application
      parameters:
        mixins:
          - kind: Deletion
            parameters:
        attributes:
          represented_user:
            kind: ref
            parameters:
              kind: User
          request:
            # TODO: union or interface
            # we need to refer to TerminalRegistrationByPhoneNumber and
            # other methods of authentication.
            kind: ref
        service:
          methods:
            creation:
              authorization:
                - kind: intraprocess
                  allow: always

  - identifier: Session
    kind: adjunct
    parameters:
      kind: entity
      hosts:
        - name: Terminal
          unique: true
      arity:
        min: 0
        max: -1
      parameters:
        service:
          enabled: true
          description: |
            Hello.
        mixins:
          - kind: Deletion
            parameters:
          - kind: Expiration
            parameters:
              duration:
                overridable: true
                value:
                  quantity: 1440
                  unit: hour

  # TODO: concept of something, which is required to create an instance of
  # an entity. One instance of this something can only be used for exactly one
  # process.
  # This something might or might not contain part which will be included in
  # the product entity.
  # Idea for the term: substrate, material, artifact, mold, aid, assist,
  # scaffold, proto.
  # TODO: we could just use prebuilt functionality,
  # e.g., PhoneNumberVerification, but we still need to declare something here
  # which brings the functionality here.
  - identifier: TerminalRegistrationByPhoneNumber
    kind: entity
    block:
      name: PhoneNumberVerification
    parameters:
      substrate:
        product:
          kind: Terminal
      id:
        space: 48
      mixins:
        - kind: PhoneNumberIntegerCodeVerification
          parameters:
            code_length:
              value: 6
            event_hooks:
              confirmed:
                authorization:
                  - kind: intraprocess
                    allow: always
                allowed_isolations:
                  # Allow only listeners from the same process
                  - process
        - kind: Deletion
          parameters:
        - kind: Expiration
          parameters:
            duration:
              overridable: true
              value:
                quantity: 5
                unit: minute
      service:
        methods:
          create:
            authorization:
              - kind: Application
                allow: on-condition
                condition:
                  eq:
                    a: type
                    b: user-agent
            allowed_isolations:
              - all
          confirm:
            authorization:
              - kind: intraprocess
                allow: always
            input_parameters:
              self:
                type: '&Self'
              code:
                type: PhoneNumberIntegerCodeVerification.Code
            output_parameters:
              session: Session
            process: |
              self.confirm_verification(id, code) {
                error(err) => return err
                ok(phone_number) => IdentifierPhoneNumber.service.get_user_or_create(phone_number) {
                  error(err) => return err
                  ok(uid) => Terminal.create(self.application, uid) => {
                    error(err) => return err
                    ok(term) => Session.create(term)
                  }
                }
              }
