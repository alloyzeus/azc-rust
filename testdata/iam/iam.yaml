module: iam
symbols:

  - identifier: User
    # This defines what this entity's role in the system. In a system, a role
    # can have only one concrete. Not to be confused with 'role' in access
    # control.
    abstract: User
    kind: entity
    parameters:
      lifecycle:
        creation:
      id:
        # Options: integer(space), uuid(version), string
        kind: integer
        parameters:
          space: 48
        generator:
          # Other options: ShardedRandomIntegerGenerator
          # The option for generator is defined by the registered generators
          # to the compiler.
          # Root entities can only use random generators.
          name: LocalRandomIntegerIDGenerator
          parameters:
            encodings:
              text:
                prefix: "ix-"
      mixins:
        - kind: Deletion
          parameters:
            event_hooks:
              enabled: true
            api:
      # Declares the creation rules. This defines how and who can create
      # an instance.
      creation:
        # The authorization definition for the creation method.
        access:
          # Here, we allow creation from the same service process
          - kind: intraprocess-private
            authorization: none
            allow: always
          - kind: intraprocess-public
            authorization: none
            allow: always
          - kind: interprocess-private (same host, loopback)
            allow: none
          - kind: interprocess-public (through public transport, e.g., internet)
            allow: none
      service:
        enabled: true
        methods:
        api:
          protocols:
            #?RFC: versioning?
            rest:
              enabled: true
            grpc:
              enabled: true

  - identifier: IdentifierPhoneNumber
    kind: adjunct
    parameters:
      hosts:
        - name: User
      kind: value-object
      parameters:
        kind: telephony.PhoneNumber
        unique: true

  - identifier: Application
    kind: entity
    parameters:
      # TODO: encode application type into the ID. we will then use
      # the same method to encode the type into Terminal ID.
      id:
        kind: integer
        parameters:
          space: 24
      creation:
        documentation: ""
      mixins:
        - kind: Ownership
          parameters:
            owner_arity:
              # overridable means that the configuration could be overriden
              # through, e.g., environment variables or config server.
              # RFC: should we, instead making these value here as value
              # available in config server?
              overridable: true
              value:
                min: 1
                max: 4
      attributes:
        access_keys:
          # A set of AccessKey with uniqueness is defined by the field id
          # by default, we use object's defined key, or we will use the
          # equality trait (value objects are required to provide equality
          # operator)
          kind: set
          parameters:
            kind: AccessKey
            key_fields: [id]
            arity:
              min: 0
              max: 4

  - identifier: Terminal
    description: |
      A terminal is an authorized instance of application.
    kind: adjunct
    parameters:
      kind: entity
      # At least one
      hosts:
        - name: Application
      parameters:
        id:
          unique: true
        mixins:
          - kind: Deletion
            parameters:
        attributes:
          represented_user:
            kind: ref
            parameters:
              kind: User
          request:
            # TODO: union or interface
            # we need to refer to TerminalRegistrationByPhoneNumber and
            # other methods of authentication.
            kind: ref
        creation:
          authorization:
            - kind: intraprocess
              allow: always
        service:
          methods:

  - identifier: Session
    kind: adjunct
    parameters:
      kind: entity
      hosts:
        - name: Terminal
          exclusive: true # only one instance of Session for a Terminal active at a time
      arity:
        min: 0
        max: -1
      parameters:
        id:
          # a flag to indicate that a session ID is globally unique regardless host entities' scope.
          # cannot be combined with ordered adjuncts.
          unique: true 
        service:
          enabled: true
          description: |
            Hello.
        mixins:
          - kind: Deletion
            parameters:
          - kind: Expiration
            parameters:
              duration:
                overridable: true
                value:
                  quantity: 1440
                  unit: hour

  # TODO: concept of something, which is required to create an instance of
  # an entity. One instance of this something can only be used for exactly one
  # process.
  # This something might or might not contain part which will be included in
  # the product entity.
  # Idea for the term: substrate, material, artifact, mold, aid, assist,
  # scaffold, proto.
  # TODO: we could just use prebuilt functionality,
  # e.g., PhoneNumberVerification, but we still need to declare something here
  # which brings the functionality here.
  - identifier: TerminalRegistrationByPhoneNumber
    kind: entity
    parameters:
      # The idea is that this entity is built upon a component. We are
      # encapsulating the component as an entity in this domain. A component
      # deals only with the value it contained.
      # TODO: same or similar concept to mixins? an entity can have only one
      # component? is this similar to Go's struct embedding?
      component:
        name: PhoneNumberVerificationWithIntegerCode
        parameters:
          code_length: 6
      substrate:
        product:
          kind: Terminal
      id:
        kind: integer
        parameters:
          space: 48
          encodings:
            text:
              prefix: ""
              alg: decimal
      mixins:
        - kind: Deletion
          parameters:
        - kind: Expiration
          parameters:
            duration:
              overridable: true
              value:
                quantity: 5
                unit: minute
      # Creation is a special service method.
      creation:
        authorization:
          - kind: Application
            allow: on-condition
            condition:
              eq:
                a: type
                b: user-agent
        allowed_isolations:
          - all
        methods:
          create:
            input_parameters:
              Self.phone_number:
      attributes:
        phone_number:
          kind: telephony.PhoneNumber
          final: true
        verification_code:
          kind: PhoneNumberVerificationCode
          final: true
      service:
        # Instance methods
        methods:
          confirm:
            # instance arity?
            mutate: true
            authorization:
              - kind: oso
                parameters:
                  policy: 'allow(ctx: Context, "confirm", _resource: Self) if ctx.is_intraprocess'
            input_parameters:
              Self:
              Self.verification_code:
            output_parameters:
              session: Session
            process: |
              self.confirm_verification(code):{
                error(err) -> return err
                ok(phone_number) -> IdentifierPhoneNumber.service.get_user_or_create(phone_number):{
                  error(err) -> return err
                  ok(uid) -> Terminal.create(self.application, uid):{
                    error(err) -> return err
                    ok(term) -> Session.create(term)
                  }
                }
              }

  - identifier: PhoneNumberVerificationCode
    kind: value_object
    parameters:
      data_type: int16
